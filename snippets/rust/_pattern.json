{
  "singleton:lazy static": {
    "prefix": "pattern_singleton_lazy_static",
    "body": [
      "use std::sync::{Mutex, Once};",
      "",
      "pub struct ${1:Singleton} {",
      "    // Fields here",
      "}",
      "",
      "impl ${1:Singleton} {",
      "    pub fn instance() -> &'static Self {",
      "        static mut INSTANCE: Option<Mutex<${1:Singleton}>> = None;",
      "        static INIT: Once = Once::new();",
      "",
      "        INIT.call_once(|| {",
      "            let singleton = ${1:Singleton} {",
      "                // Initialize fields here",
      "            };",
      "            unsafe {",
      "                INSTANCE = Some(Mutex::new(singleton));",
      "            }",
      "        });",
      "",
      "        unsafe {",
      "            INSTANCE.as_ref().unwrap().lock().unwrap()",
      "        }",
      "    }",
      "}"
    ],
    "description": "Creates a lazy static singleton in Rust"
  },
  "singleton:lazy static with mutex": {
    "prefix": "pattern_singleton_lazy_mutex",
    "body": [
      "use std::sync::{Mutex, Once};",
      "",
      "pub struct ${1:Singleton} {",
      "    // Fields here",
      "}",
      "",
      "impl ${1:Singleton} {",
      "    pub fn instance() -> &'static Self {",
      "        static mut INSTANCE: Option<Mutex<${1:Singleton}>> = None;",
      "        static INIT: Once = Once::new();",
      "",
      "        INIT.call_once(|| {",
      "            let singleton = ${1:Singleton} {",
      "                // Initialize fields here",
      "            };",
      "            unsafe {",
      "                INSTANCE = Some(Mutex::new(singleton));",
      "            }",
      "        });",
      "",
      "        unsafe {",
      "            INSTANCE.as_ref().unwrap().lock().unwrap()",
      "        }",
      "    }",
      "}"
    ],
    "description": "Creates a lazy static singleton with Mutex in Rust"
  },
  "singleton:lazy Static with OnceCell": {
    "prefix": "pattern_singleton_lazy_oncecell",
    "body": [
      "use std::sync::Mutex;",
      "use once_cell::sync::OnceCell;",
      "",
      "pub struct ${1:Singleton} {",
      "    // Fields here",
      "}",
      "",
      "pub static INSTANCE: OnceCell<Mutex<${1:Singleton}>> = OnceCell::new();",
      "",
      "impl ${1:Singleton} {",
      "    pub fn instance() -> &'static Mutex<${1:Singleton}> {",
      "        INSTANCE.get_or_init(|| Mutex::new(${1:Singleton} {",
      "            // Initialize fields here",
      "        })).get().unwrap()",
      "    }",
      "}"
    ],
    "description": "Creates a lazy static singleton with OnceCell in Rust (requires `once_cell` crate)"
  },
  "singleton:lazy Static with RwLock": {
    "prefix": "pattern_singleton_lazy_rwlock",
    "body": [
      "use std::sync::{RwLock, Once};",
      "",
      "pub struct ${1:Singleton} {",
      "    // Fields here",
      "}",
      "",
      "impl ${1:Singleton} {",
      "    pub fn instance() -> &'static Self {",
      "        static mut INSTANCE: Option<RwLock<${1:Singleton}>> = None;",
      "        static INIT: Once = Once::new();",
      "",
      "        INIT.call_once(|| {",
      "            let singleton = ${1:Singleton} {",
      "                // Initialize fields here",
      "            };",
      "            unsafe {",
      "                INSTANCE = Some(RwLock::new(singleton));",
      "            }",
      "        });",
      "",
      "        unsafe {",
      "            INSTANCE.as_ref().unwrap().read().unwrap()",
      "        }",
      "    }",
      "}"
    ],
    "description": "Creates a lazy static singleton with RwLock in Rust"
  },
  "singleton:Lazy Static with Arc": {
    "prefix": "pattern_singleton_lazy_arc",
    "body": [
      "use std::sync::{Arc, Mutex, Once};",
      "",
      "pub struct ${1:Singleton} {",
      "    // Fields here",
      "}",
      "",
      "impl ${1:Singleton} {",
      "    pub fn instance() -> Arc<Mutex<Self>> {",
      "        static mut INSTANCE: Option<Arc<Mutex<${1:Singleton}>>> = None;",
      "        static INIT: Once = Once::new();",
      "",
      "        INIT.call_once(|| {",
      "            let singleton = Arc::new(Mutex::new(${1:Singleton} {",
      "                // Initialize fields here",
      "            }));",
      "            unsafe {",
      "                INSTANCE = Some(singleton);",
      "            }",
      "        });",
      "",
      "        unsafe {",
      "            INSTANCE.as_ref().unwrap().clone()",
      "        }",
      "    }",
      "}"
    ],
    "description": "Creates a lazy static singleton with Arc and Mutex in Rust"
  },
  "singleton:Lazy Static with Mutex and Option": {
    "prefix": "pattern_singleton_lazy_mutex_option",
    "body": [
      "use std::sync::{Mutex, Once};",
      "",
      "pub struct ${1:Singleton} {",
      "    // Fields here",
      "}",
      "",
      "impl ${1:Singleton} {",
      "    pub fn instance() -> &'static Self {",
      "        static INSTANCE: OnceCell<Mutex<Option<${1:Singleton}>>> = OnceCell::new();",
      "",
      "        INSTANCE.get_or_init(|| Mutex::new(None)).lock().unwrap().get_or_insert_with(|| ${1:Singleton} {",
      "            // Initialize fields here",
      "        })",
      "    }",
      "}"
    ],
    "description": "Creates a lazy static singleton with Mutex and Option in Rust (requires `once_cell` crate)"
  },
  "singleton:lazy Static with RwLockhc": {
    "prefix": "pattern_singleton-lazy-rwlockhc",
    "body": [
      "use std::sync::{RwLock, Once};",
      "",
      "pub struct ${1:Singleton} {",
      "    // Fields here",
      "}",
      "",
      "impl ${1:Singleton} {",
      "    pub fn instance() -> &'static Self {",
      "        static INSTANCE: OnceCell<RwLock<Option<${1:Singleton}>>> = OnceCell::new();",
      "",
      "        INSTANCE.get_or_init(|| RwLock::new(None)).read().unwrap().get_or_insert_with(|| ${1:Singleton} {",
      "            // Initialize fields here",
      "        })",
      "    }",
      "}"
    ],
    "description": "Creates a lazy static singleton with RwLock and Option in Rust (requires `once_cell` crate)"
  },
  "singleton:lazy Static with RefCell": {
    "prefix": "pattern_singleton_lazy_refcell",
    "body": [
      "use std::cell::RefCell;",
      "use std::rc::Rc;",
      "use std::sync::Once;",
      "",
      "pub struct ${1:Singleton} {",
      "    // Fields here",
      "}",
      "",
      "impl ${1:Singleton} {",
      "    pub fn instance() -> Rc<RefCell<Self>> {",
      "        static INSTANCE: OnceCell<Rc<RefCell<${1:Singleton}>>> = OnceCell::new();",
      "",
      "        INSTANCE.get_or_init(|| Rc::new(RefCell::new(${1:Singleton} {",
      "            // Initialize fields here",
      "        })))",
      "    }",
      "}"
    ],
    "description": "Creates a lazy static singleton with RefCell in Rust (requires `once_cell` crate)"
  },
  "singleton:thread-Local Storage": {
    "prefix": "pattern_singleton_thread_local",
    "body": [
      "use std::cell::RefCell;",
      "use std::thread_local;",
      "",
      "thread_local! {",
      "    static ${1:Singleton}: RefCell<Option<${2:Singleton}>> = RefCell::new(None);",
      "}",
      "",
      "pub fn get_instance() -> &'static ${2:Singleton} {",
      "    ${1:Singleton}.with(|singleton| {",
      "        if singleton.borrow().is_none() {",
      "            *singleton.borrow_mut() = Some(${2:Singleton} {",
      "                // Initialize fields here",
      "            });",
      "        }",
      "        singleton.borrow().as_ref().unwrap()",
      "    })",
      "}"
    ],
    "description": "Creates a thread-local singleton in Rust"
  },
  "singleton:Lazy Static with Custom Initialization": {
    "prefix": "pattern_singleton_lazy_custom",
    "body": [
      "use std::sync::{Mutex, Once};",
      "",
      "pub struct ${1:Singleton} {",
      "    // Fields here",
      "}",
      "",
      "impl ${1:Singleton} {",
      "    pub fn initialize() -> ${1:Singleton} {",
      "        // Custom initialization logic here",
      "        ${1:Singleton} {",
      "            // Initialize fields here",
      "        }",
      "    }",
      "",
      "    pub fn instance() -> &'static Self {",
      "        static mut INSTANCE: Option<Mutex<${1:Singleton}>> = None;",
      "        static INIT: Once = Once::new();",
      "",
      "        INIT.call_once(|| {",
      "            let singleton = ${1:Singleton}::initialize();",
      "            unsafe {",
      "                INSTANCE = Some(Mutex::new(singleton));",
      "            }",
      "        });",
      "",
      "        unsafe {",
      "            INSTANCE.as_ref().unwrap().lock().unwrap()",
      "        }",
      "    }",
      "}"
    ],
    "description": "Creates a lazy static singleton with custom initialization in Rust"
  }
}
