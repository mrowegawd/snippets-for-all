{
  "closure:for Result Handling": {
    "prefix": "closure_handle_result",
    "body": [
      "|${1:result}| {",
      "\tmatch ${1:result} {",
      "\t\tOk(value) => {",
      "\t\t\t${0:// Code on success}",
      "\t\t},",
      "\t\tErr(err) => {",
      "\t\t\teprintln!(\"Error: {}\", err);",
      "\t\t\t${2:// Code on error}",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "Create a closure to handle a Result, printing errors to stderr."
  },
  "closure:for Option Handling": {
    "prefix": "closure_handle_option",
    "body": [
      "|${1:option}| {",
      "\tmatch ${1:option} {",
      "\t\tSome(value) => {",
      "\t\t\t${0:// Code on success}",
      "\t\t},",
      "\t\tNone => {",
      "\t\t\tpanic!(\"Expected Some, got None\");",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "Create a closure to handle an Option, panicking on None."
  },
  "closure:for Mapping Result": {
    "prefix": "closure_handle_map_result",
    "body": [
      "|${1:result}| {",
      "\t${1:result}.map_err(|err| {",
      "\t\teprintln!(\"Error: {}\", err);",
      "\t\t${2:// Handle error}",
      "\t})"
    ],
    "description": "Create a closure to map a Result, handling errors."
  },
  "closure:for Unwrapping Option": {
    "prefix": "closure_handle_unwrap_option",
    "body": [
      "|${1:option}| {",
      "\t${1:option}.unwrap_or_else(|| {",
      "\t\tpanic!(\"Expected Some, got None\");",
      "\t})"
    ],
    "description": "Create a closure to unwrap an Option, panicking on None."
  },
  "closure:for Unwrapping Result": {
    "prefix": "closure_handle_unwrap_result",
    "body": [
      "|${1:result}| {",
      "\t${1:result}.unwrap_or_else(|err| {",
      "\t\tpanic!(\"Failed to unwrap result: {}\", err);",
      "\t})"
    ],
    "description": "Create a closure to unwrap a Result, panicking on error."
  },
  "closure:for Expecting Result": {
    "prefix": "closure_handle_expect_result",
    "body": [
      "|${1:result}| {",
      "\t${1:result}.expect(\"${2:Failed to unwrap result}\")"
    ],
    "description": "Create a closure to expect a Result, panicking with custom message on error."
  },
  "closure:for Option Unwrap or Else": {
    "prefix": "closure_handle_unwrap_or_else_option",
    "body": [
      "|${1:option}| {",
      "\t${1:option}.unwrap_or_else(|| {",
      "\t\tpanic!(\"Expected Some, got None\");",
      "\t})"
    ],
    "description": "Create a closure to unwrap an Option, panicking on None."
  },
  "closure:with Untyped Parameter": {
    "prefix": "closure_handle_param_untyped",
    "body": ["|${1:parameter}| {", "\t$0", "};"],
    "description": "Create a Rust closure with an untyped parameter"
  },
  "closure:with Two Parameters": {
    "prefix": "closure_handle_param_two",
    "body": [
      "|${1:param1}: ${2:type1}, ${3:param2}: ${4:type2}| {",
      "\t$0",
      "};"
    ],
    "description": "Create a Rust closure with two parameters"
  },
  "closure:with Return Value": {
    "prefix": "closure_handle_ret",
    "body": ["|| -> ${1:ReturnType} {", "\t$0", "};"],
    "description": "Create a Rust closure with a return value"
  },
  "closure:with Single Expression": {
    "prefix": "closure_handle_expect_result",
    "body": ["|| ${1:expr}", "};"],
    "description": "Create a Rust closure with a single expression"
  },
  "closure:with Move": {
    "prefix": "closure_handle_move",
    "body": ["move || {", "\t$0", "};"],
    "description": "Create a Rust closure with move semantics"
  },
  "closure:with Multiple Parameters": {
    "prefix": "closure_handle_param_multi",
    "body": [
      "|${1:param1}: ${2:type1}, ${3:param2}: ${4:type2}, ${5:param3}: ${6:type3}| {",
      "\t$0",
      "};"
    ],
    "description": "Create a Rust closure with multiple parameters"
  },
  "closure:with Reference Parameter": {
    "prefix": "closure_handle_param_reference",
    "body": ["|${1:param}: &${2:type}| {", "\t$0", "};"],
    "description": "Create a Rust closure with a reference parameter"
  },
  "closure:with Mutable Reference Parameter": {
    "prefix": "closure_handle_param_mut_reference",
    "body": ["|${1:param}: &mut ${2:type}| {", "\t$0", "};"],
    "description": "Create a Rust closure with a mutable reference parameter"
  },
  "closure:as Function Argument": {
    "prefix": "closure_handle_param_as_func",
    "body": ["|${1:param}: ${2:type}| -> ${3:ReturnType} {", "\t$0", "}"],
    "description": "Create a Rust closure to be used as a function argument"
  }
}
