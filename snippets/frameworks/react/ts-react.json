{
  "import:reduxconnect": {
    "prefix": "imp_reduxconnect_from_react_redux",
    "body": ["import { connect } from 'react-redux'"]
  },
  "import:importbrowserrouter": {
    "prefix": "imp_browserrouter_from_reactdom",
    "body": ["import { BrowserRouter as Router } from 'react-router-dom'"]
  },
  "import:importbrowserrouterwithrouteandnavlink": {
    "prefix": "imp_react_from_as_RouterWithRouteAndNavLink",
    "body": [
      "import { BrowserRouter as Router, Route, NavLink } from 'react-router-dom'",
      ""
    ]
  },
  "import:proptypes": {
    "prefix": "imp_react_prop_types",
    "body": ["import PropTypes from 'prop-types'"]
  },
  "import:React": {
    "prefix": "imp_react",
    "body": ["import React from 'react'"]
  },
  "import:ReactDom": {
    "prefix": "imp_reactdom",
    "body": ["import ReactDOM from 'react-dom'"]
  },
  "import:React With Component": {
    "prefix": "imp_react_component",
    "body": ["import React, { Component } from 'react'"]
  },
  "import:RouterLink": {
    "prefix": "imp_react_router_dom_link",
    "body": ["import { Link } from 'react-router-dom'"]
  },
  "import:RouterNavLink": {
    "prefix": "imp_react_router_dom_navlink",
    "body": ["import { NavLink } from 'react-router-dom'"]
  },
  "import:RouterSetup": {
    "prefix": "imp_react_router_dom_setup",
    "body": ["import { Route, Switch, NavLink, Link } from 'react-router-dom'"]
  },
  "import:RouterSwitch": {
    "prefix": "imp_react_router_dom_switch",
    "body": ["import { Switch } from 'react-router-dom'"]
  },
  "import:ReactWithPureComponent": {
    "prefix": "imp_react_with_pure_component",
    "body": ["import React, { PureComponent } from 'react'"]
  },
  "import:ReactWithPureComponentAndPropTypes": {
    "prefix": "imp_react_with_pure_component_and_prop_types",
    "body": [
      "import React, { PureComponent } from 'react'",
      "import PropTypes from 'prop-types'",
      ""
    ]
  },
  "prop:t:proptypes": {
    "body": "$1.propTypes = {\n\t$2\n}",
    "prefix": "prop_types_",
    "description": "Creates empty propTypes declaration"
  },
  "prop:t:proptypes string required": {
    "prefix": "prop_t_string_required",
    "body": ["PropTypes.string.isRequired"],
    "description": "String prop type required"
  },
  "prop:t:proptypes node": {
    "prefix": "prop_t_node",
    "body": ["PropTypes.node"],
    "description": "Anything that can be rendered: numbers, strings, elements or an array"
  },
  "prop:t:proptypes element": {
    "prefix": "prop_t_element",
    "body": ["PropTypes.element"],
    "description": "React element prop type"
  },
  "prop:t:proptypes instanceof": {
    "prefix": "prop_t_instanceOf",
    "body": ["PropTypes.instanceOf($0)"],
    "description": "Is an instance of a class prop type"
  },
  "prop:t:proptypes enum": {
    "prefix": "prop_t_enum",
    "body": ["PropTypes.oneOf(['$0'])"],
    "description": "Prop type limited to specific values by treating it as an enum"
  },
  "prop:t:proptypes oneoftype": {
    "prefix": "prop_t_oneoftype",
    "body": ["PropTypes.oneOfType([", "  $0", "])"],
    "description": "An object that could be one of many types"
  },
  "prop:t:proptypes oneoftype required": {
    "prefix": "prop_t_oneoftyperequired",
    "body": ["PropTypes.oneOfType([", "  $0", "]).isRequired"],
    "description": "An object that could be one of many types required"
  },
  "prop:t:proptypes arrayof": {
    "prefix": "prop_t_arrayof",
    "body": ["PropTypes.arrayOf($0)"],
    "description": "An array of a certain type"
  },
  "prop:t:proptypes arrayof required": {
    "prefix": "prop_t_arrayof_required",
    "body": ["PropTypes.arrayOf($0).isRequired"],
    "description": "An array of a certain type required"
  },
  "prop:t:proptypes array required": {
    "prefix": "prop_t_array_required",
    "body": ["PropTypes.array.isRequired"],
    "description": "Array prop type required"
  },
  "prop:t:proptypes objectof": {
    "prefix": "prop_t_objectof",
    "body": ["PropTypes.objectOf($0)"],
    "description": "An object with property values of a certain type"
  },
  "prop:t:proptypes objectof required": {
    "prefix": "prop_t_objectof_required",
    "body": ["PropTypes.objectOf($0).isRequired"],
    "description": "An object with property values of a certain type required"
  },
  "prop:t:proptypes object required": {
    "prefix": "prop_t_object_required",
    "body": ["PropTypes.object.isRequired"],
    "description": "Object prop type required"
  },
  "prop:t:proptypes shape": {
    "prefix": "prop_t_shape",
    "body": ["PropTypes.shape({", "  $0", "})"],
    "description": "An object taking on a particular shape"
  },
  "prop:t:proptypes shape required": {
    "prefix": "prop_t_shape_required",
    "body": ["PropTypes.shape({", "  $0", "}).isRequired"],
    "description": "An object taking on a particular shape required"
  },
  "prop:t:proptypes exact": {
    "prefix": "prop_t_exact",
    "body": ["PropTypes.exact({", "  $0", "})"],
    "description": "An object with warnings on extra properties"
  },
  "prop:t:proptypes exact required": {
    "prefix": "prop_t_exact_required",
    "body": ["PropTypes.exact({", "  $0", "}).isRequired"],
    "description": "An object with warnings on extra properties required"
  },
  "prop:t:proptypes any": {
    "prefix": "prop_t_any",
    "body": ["PropTypes.any"],
    "description": "Any prop type"
  },
  "prop:t:proptypes string": {
    "prefix": "prop_t_string",
    "body": ["PropTypes.string"],
    "description": "String prop type"
  },
  "prop:t:proptypes node required": {
    "prefix": "prop_t_node_required",
    "body": ["PropTypes.node.isRequired"],
    "description": "Anything that can be rendered: numbers, strings, elements or an array required"
  },
  "prop:t:proptypes object": {
    "prefix": "prop_t_object",
    "body": ["PropTypes.object"],
    "description": "Object prop type"
  },
  "prop:t:proptypes enum required": {
    "body": ["PropTypes.oneOf(['$0']).isRequired"],
    "prefix": "prop_t_enum_required",
    "description": "Prop type limited to specific values by treating it as an enum required"
  },
  "prop:t:proptypes array": {
    "body": ["PropTypes.array"],
    "prefix": "prop_t_array",
    "description": "Array prop type"
  },
  "prop:t:proptypes bool": {
    "prefix": "prop_t_bool",
    "body": ["PropTypes.bool"],
    "description": "Bool prop type"
  },
  "prop:t:proptypes bool required": {
    "prefix": "prop_t_bool_required",
    "body": ["PropTypes.bool.isRequired"],
    "description": "Bool prop type required"
  },
  "prop:t:proptypes func": {
    "prefix": "prop_t_func",
    "body": ["PropTypes.func"],
    "description": "Func prop type"
  },
  "prop:t:proptypes instanceof required": {
    "prefix": "prop_t_instanceof_required",
    "body": ["PropTypes.instanceOf($0).isRequired"],
    "description": "Is an instance of a class prop type required"
  },
  "prop:t:proptypes func required": {
    "prefix": "prop_t_func_required",
    "body": ["PropTypes.func.isRequired"],
    "description": "Func prop type required"
  },
  "prop:t:proptypes number": {
    "prefix": "prop_t_number",
    "body": ["PropTypes.number"],
    "description": "Number prop type"
  },
  "prop:t:proptypes number required": {
    "prefix": "prop_t_number_required",
    "body": ["PropTypes.number.isRequired"],
    "description": "Number prop type required"
  },
  "prop:t:proptypes element required": {
    "prefix": "prop_t_element_required",
    "body": ["PropTypes.element.isRequired"],
    "description": "React element prop type required"
  },
  "ret:component render": {
    "prefix": "ret_render_component",
    "body": "render () {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}",
    "description": "When called, it should examine this.props and this.state and return a single child element."
  },
  "component:did update": {
    "prefix": "component_did_mount",
    "body": "componentDidUpdate (prevProps, prevState) {\n\t$0\n}\n",
    "description": "Invoked immediately after the component's updates are flushed to the DOM."
  },
  "component:did mount": {
    "prefix": "component_did_mount",
    "body": "componentDidMount () {\n\t$0\n}\n",
    "description": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs."
  },
  "component:get derived state from props": {
    "prefix": "component_get_derived_state_from_prop",
    "body": "\nstatic getDerivedStateFromProps(nextProps, prevState) {\n\t$0\n}\n",
    "description": "Invoked after a component is instantiated as well as when it receives new props. It should return an object to update state, or null to indicate that the new props do not require any state updates."
  },
  "component:will receive props": {
    "prefix": "component_will_recv_prop",
    "body": "componentWillReceiveProps (nextProps) {\n\t$0\n}\n",
    "description": "Invoked when a component is receiving new props. This method is not called for the initial render."
  },
  "component:will unmount": {
    "prefix": "component_did_mount",
    "body": "componentWillUnmount () {\n\t$0\n}\n",
    "description": "Invoked immediately before a component is unmounted from the DOM."
  },
  "component:will mount": {
    "prefix": "component_did_mount",
    "body": "\ncomponentWillMount () {\n\t$0\n}\n",
    "description": "Invoked once, both on the client and server, immediately before the initial rendering occurs"
  },
  "component:will update": {
    "prefix": "component_will_update",
    "body": "componentWillUpdate (nextProps, nextState) {\n\t$0\n}\n",
    "description": "Invoked immediately before rendering when new props or state are being received."
  },
  "component:hoc component with redux": {
    "prefix": "component_redux_hox",
    "body": [
      "import React from 'react'",
      "import { connect } from 'react-redux'",
      "import PropTypes from 'prop-types'",
      "",
      "export const mapStateToProps = state => ({})",
      "",
      "export const mapDispatchToProps = {}",
      "",
      "export const ${1:first} = (WrappedComponent) => {",
      "  const hocComponent = ({ ...props }) => <WrappedComponent {...props} />",
      "",
      "  hocComponent.propTypes = {}",
      "",
      "  return hocComponent",
      "}",
      "",
      "export default WrapperComponent => connect(mapStateToProps, mapDispatchToProps)(${1:first}(WrapperComponent))",
      ""
    ]
  },
  "component:hoc component": {
    "prefix": "component_hoc_component",
    "body": [
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "export default (WrappedComponent) => {",
      "  const hocComponent = ({ ...props }) => <WrappedComponent {...props} />",
      "",
      "  hocComponent.propTypes = {}",
      "",
      "  return hocComponent",
      "}",
      ""
    ]
  },
  "this:setState object": {
    "prefix": "this_setState",
    "body": "this.setState($0)",
    "description": "Performs a shallow merge of nextState into current state"
  },
  "this:setState funciton": {
    "prefix": "this_setState_func",
    "body": "this.setState((state, props) => { return { $0 }})\n",
    "description": "Performs a shallow merge of nextState into current state"
  },
  "this:props": {
    "prefix": "this_prop",
    "body": "this.props.$0",
    "description": "Access component's props"
  },
  "this:state": {
    "prefix": "this_state",
    "body": "this.state.$0",
    "description": "Access component's state"
  },
  "this:destructuring of state": {
    "prefix": "this_state_destructuring",
    "body": ["const { ${1:name} } = this.state"]
  },
  "this:destructuring of props": {
    "prefix": "this_prop_destructuring",
    "body": ["const { ${1:name} } = this.props"]
  },
  "this:bindThis": {
    "prefix": "this_bind",
    "body": ["this.${1:first} = this.${1:first}.bind(this)"],
    "description": "Binds this to a method"
  },
  "this:emptyState": {
    "prefix": "this_state_empty",
    "body": ["state = { ${1:first} }"],
    "description": "Creates empty state object. To be used in a constructor."
  },
  "reactNativeImport": {
    "prefix": "imrn",
    "body": ["import { ${1:first} } from 'react-native'"]
  },
  "reactNativeStyles": {
    "prefix": "rnstyle",
    "body": ["const styles = StyleSheet.create({${1:first}})"]
  },
  "jsx elements map": {
    "prefix": "elem_map",
    "body": "{${1:array}.map((item) => <${2:elementName} key={item.id}>\n\t$0\n</${2}>)}",
    "description": "an element self closed"
  },
  "jsx elements map with return": {
    "prefix": "elem_map_ret",
    "body": "{${1:array}.map((item) => {\n\treturn <${2:elementName} key={item.id}>\n\t$0\n</${2}>\n})}",
    "description": "an element self closed"
  },
  "jsx element wrap selection": {
    "prefix": "elem_wrap",
    "body": "<${1:elementName}>\n\t{$TM_SELECTED_TEXT}\n</${1}>",
    "description": "an element"
  },
  "hook:useCustom": {
    "prefix": "hook_usecustom",
    "body": [
      "const ${1:customHookName} = () => {",
      "\t$0",
      "};",
      "",
      "export default ${1:customHookName};"
    ],
    "description": "Declare a custom hook in React"
  },
  "hook:useEffect": {
    "prefix": "hook_useeffect",
    "body": [
      "useEffect(() => {",
      "  ${1:first}",
      "",
      "  return () => {",
      "    ${2:second}",
      "  }",
      "}, [${3:third}])",
      ""
    ],
    "description": "React useEffect() hook"
  },
  "hook:useState": {
    "prefix": "hook_usestate",
    "body": "const [${1:val}, set${2:setterName}] = useState(${3:defVal})",
    "description": "use state hook"
  },
  "hook:useCallback": {
    "prefix": "hook_usecallback",
    "body": [
      "const ${1:callback} = useCallback(() => {",
      "\t$0",
      "}, [${2:dependency}]);"
    ],
    "description": "Declare a memoized callback with useCallback hook in React"
  },
  "hook:useeffect 2": {
    "prefix": "hook_useeffect_2",
    "body": ["useEffect(() => {", "\t$0", "}, [${1:dependency}]);"],
    "description": "Declare an effect with useEffect hook in React"
  },
  "hook:useState 2": {
    "prefix": "hook_usestate_with_type",
    "body": [
      "const [${1:state}, set${2:State}] = useState<${3:Type}>(initialValue);",
      "$0"
    ],
    "description": "Declare a state variable with useState hook in React"
  },
  "hook:useeffect with cleanup": {
    "prefix": "hook_useeffect_cleanup",
    "body": [
      "useEffect(() => {",
      "\t$1",
      "\n\treturn () => {",
      "\t\t$2",
      "\t}",
      "}, [${3:dependencies}])$0"
    ],
    "description": "React useEffect() hook with a cleanup function"
  },
  "hook:createContext": {
    "prefix": "hook_createcontext",
    "body": [
      "export const $1 = createContext<$2>(",
      "\t(null as any) as $2",
      ")"
    ],
    "description": "creates a react context"
  },
  "hook:useReducer": {
    "prefix": "hook_usereducer",
    "body": [
      "const [state, dispatch] = useReducer(${1:reducer}, ${2:initialState});",
      "$0"
    ],
    "description": "Declare a state management with useReducer hook in React"
  },
  "hook:useContext": {
    "prefix": "hook_usecontext",
    "body": ["const $1 = useContext($2)$0"],
    "description": "React useContext() hook"
  },
  "hook:useRef": {
    "prefix": "hook_useref",
    "body": ["const ${1:ref} = useRef<${2:Type}>(null);", "$0"],
    "description": "Declare a ref with useRef hook in React"
  },
  "hook:useMemo": {
    "prefix": "hook_usememo",
    "body": [
      "const ${1:memoizedValue} = useMemo(() => ${2:computeExpensiveValue}(${3:a}, ${4:b}), [${5:a}, ${6:b}])$0"
    ],
    "description": "React useMemo() hook"
  },
  "hook:useimperative handle": {
    "prefix": "hook_useimperative_handle",
    "body": [
      "useImperativeHandle(${1:ref}, () => ({",
      "\t$0",
      "}), [${2:dependency}]);"
    ],
    "description": "Customize instance value with useImperativeHandle hook in React"
  },
  "hook:useLayoutEffect": {
    "prefix": "hook_uselayouteffect",
    "body": ["useLayoutEffect(() => {", "\t$0", "}, [${1:dependency}]);"],
    "description": "Run the effect before browser layout change with useLayoutEffect hook in React"
  },
  "hook:useform": {
    "prefix": "hook_form",
    "body": [
      "const useForm = (initialValues: any) => {",
      "\tconst [values, setValues] = useState(initialValues);",
      "",
      "\tconst handleChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {",
      "\t\tconst { name, value } = event.target;",
      "\t\tsetValues({",
      "\t\t\t...values,",
      "\t\t\t[name]: value",
      "\t\t});",
      "\t};",
      "",
      "\treturn {",
      "\t\tvalues,",
      "\t\thandleChange",
      "\t};",
      "};",
      "",
      "export default useForm;"
    ],
    "description": "Create a useForm custom hook in React for form handling"
  },
  "hook:useDebugValue": {
    "prefix": "hook_useDebugValue",
    "body": ["useDebugValue(${1:value});", "$0"],
    "description": "Display a label for custom hook in React"
  },
  "react:class:method constructor basic": {
    "prefix": "react_class_method_constructor_with_context",
    "body": [
      "constructor(props) {",
      "\tsuper(props);",
      "\tthis.state = {",
      "\t\t// Initialize state here",
      "\t};",
      "}",
      ""
    ],
    "description": "Create basic constructor for React class component with state"
  },
  "react:class:method constructor with binding": {
    "prefix": "react_class_method_constructor_with_binding_click",
    "body": [
      "constructor(props) {",
      "\tsuper(props);",
      "\tthis.state = {",
      "\t\t// Initialize state here",
      "\t};",
      "\tthis.handleClick = this.handleClick.bind(this);",
      "}",
      "",
      "handleClick() {",
      "\t// Handle click event",
      "}"
    ],
    "description": "Create constructor with method binding for React class component"
  },
  "react:class:method constructor with props and state": {
    "prefix": "react_class_method_constructor_with_props_and_state",
    "body": [
      "constructor(props) {",
      "\tsuper(props);",
      "\tthis.state = {",
      "\t\tcount: 0",
      "\t};",
      "\tconsole.log('Props:', this.props);",
      "}",
      ""
    ],
    "description": "Create constructor with props and state"
  },
  "react:class:method constructor with intial state": {
    "prefix": "react_class_method_constructor_with_initial_state",
    "body": [
      "constructor(props) {",
      "\tsuper(props);",
      "\tthis.state = {",
      "\t\tvalue: ''",
      "\t};",
      "\tthis.handleChange = this.handleChange.bind(this);",
      "}",
      "",
      "handleChange(event) {",
      "\tthis.setState({ value: event.target.value });",
      "}"
    ],
    "description": "Create constructor with initial state and method"
  },
  "react:class:method constructor with multi properties": {
    "prefix": "react_class_method_constructor_with_multi_properties",
    "body": [
      "constructor(props) {",
      "\tsuper(props);",
      "\tthis.state = {",
      "\t\tisLoggedIn: false,",
      "\t\tusername: '',",
      "\t\ttheme: 'light'",
      "\t};",
      "}",
      ""
    ],
    "description": "Create constructor with multiple state properties"
  },
  "react:class:method constructor with default props and state": {
    "prefix": "react_class_method_constructor_with_default_props_and_state",
    "body": [
      "constructor(props) {",
      "\tsuper(props);",
      "\tthis.state = {",
      "\t\tcounter: props.initialCounter || 0",
      "\t};",
      "}",
      "",
      "static defaultProps = {",
      "\tinitialCounter: 10",
      "};"
    ],
    "description": "Create constructor with default props and state"
  },
  "react:class:method constructor with erorr boundry": {
    "prefix": "react_class_method_constructor_error_boundary",
    "body": [
      "constructor(props) {",
      "\tsuper(props);",
      "\tthis.state = {",
      "\t\thasError: false",
      "\t};",
      "}",
      "",
      "static getDerivedStateFromError(error) {",
      "\treturn { hasError: true };",
      "}",
      "",
      "componentDidCatch(error, info) {",
      "\tconsole.log(error, info);",
      "}"
    ],
    "description": "Create constructor with error boundary in React class component"
  },
  "react:template:class:component:proptypes": {
    "prefix": "react_template_class_component",
    "body": [
      "import PropTypes from 'prop-types'",
      "import React, { Component } from 'react'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends Component {",
      "  static propTypes = {${2:second}: ${3:third}}",
      "",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>${1:first}</div>",
      "\t\t)",
      "\t}",
      "}",
      ""
    ],
    "description": "Creates a React component class with PropTypes and ES7 module system"
  },
  "react:template:class:component:with type props state": {
    "prefix": "react_template_class_component_with_type_props_state",
    "body": [
      "import React, { Component } from 'react'",
      "",
      "type Props = {}",
      "",
      "type State = {}",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends Component<Props, State> {",
      "  state = {}",
      "",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>${1:first}</div>",
      "\t\t)",
      "\t}",
      "}"
    ],
    "description": "Creates a React component class with ES7 module system and TypeScript interfaces"
  },
  "react:template:class:component:with extend props state": {
    "prefix": "react_template_class_component_with_default_export",
    "body": [
      "import React, { Component } from 'react'",
      "",
      "type Props = {}",
      "",
      "type State = {}",
      "",
      "class ${1:${TM_FILENAME_BASE}} extends Component<Props, State> {",
      "  state = {}",
      "",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>${1:first}</div>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React component class with ES7 module system and TypeScript interfaces"
  },
  "react:template:class:component:native with styles": {
    "prefix": "react_template_class_component_native",
    "body": [
      "import { Text, StyleSheet, View } from 'react-native'",
      "import React, { Component } from 'react'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<View>",
      "\t\t\t\t<Text>${1:first}</Text>",
      "\t\t\t</View>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "const styles = StyleSheet.create({})"
    ]
  },
  "react:template:class:component:native export": {
    "prefix": "react_template_class_component_export_",
    "body": [
      "import { Text, View } from 'react-native'",
      "import React, { Component } from 'react'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<View>",
      "\t\t\t\t<Text>${1:first}</Text>",
      "\t\t\t</View>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ]
  },
  "react:template:class:component:with full component": {
    "prefix": "react_template_class_component_full",
    "body": "import React, { Component, PropTypes } from 'react'\n\nclass ${TM_FILENAME_BASE} extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t}\n\n\tcomponentWillMount () {\n\n\t}\n\n\tcomponentDidMount () {\n\n\t}\n\n\tcomponentWillReceiveProps (nextProps) {\n\n\t}\n\n\tshouldComponentUpdate (nextProps, nextState) {\n\n\t}\n\n\tcomponentWillUpdate (nextProps, nextState) {\n\n\t}\n\n\tcomponentDidUpdate (prevProps, prevState) {\n\n\t}\n\n\tcomponentWillUnmount () {\n\n\t}\n\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n${1}.propTypes = {\n\n}\n\nexport default ${1}",
    "description": "Creates a React component class with PropTypes and all lifecycle methods"
  },
  "react:template:class:component:redux component": {
    "prefix": "react_template_class_component_redux_component",
    "body": [
      "import { connect } from 'react-redux'",
      "import React, { Component } from 'react'",
      "",
      "type Props = {}",
      "",
      "type State = {}",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component<Props, State> {",
      "\tstate = {}",
      "",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>${1:first}</div>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "const mapStateToProps = (state) => ({})",
      "",
      "const mapDispatchToProps = {}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})"
    ],
    "description": "Creates a React component class with connected redux and ES7 module system and TypeScript interfaces"
  },
  "react:template:class:component:redux class component 2": {
    "prefix": "react_template_class_redux_component_with_type_props_state",
    "body": [
      "import React, { Component } from 'react'",
      "import { connect } from 'react-redux'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>${1:first}</div>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "const mapStateToProps = (state) => ({})",
      "",
      "const mapDispatchToProps = {}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})"
    ],
    "description": "Creates a React component class with connected redux and ES7 module system"
  },
  "react:template:class:component:redux proptypes": {
    "prefix": "react_template_class_redux_component_with_static_proptypes",
    "body": [
      "import PropTypes from 'prop-types'",
      "import React, { Component } from 'react'",
      "import { connect } from 'react-redux'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component {",
      "  static propTypes = {",
      "    ${2:second}: ${3:third}",
      "  }",
      "",
      "  render() {",
      "    return (",
      "      <div>${1:first}</div>",
      "    )",
      "  }",
      "}",
      "",
      "const mapStateToProps = (state) => ({})",
      "",
      "const mapDispatchToProps = {}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})"
    ],
    "description": "Creates a React component class with PropTypes with connected redux and ES7 module system"
  },
  "react:template:class:component:redux extends purecomponent": {
    "prefix": "react_template_class_redux_compeonent_with_extends_purecomponent",
    "body": [
      "import React, { PureComponent } from 'react'",
      "",
      "type Props = {}",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends PureComponent<Props> {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>${1:first}</div>",
      "\t\t)",
      "\t}",
      "}"
    ],
    "description": "Creates a React pure component class with ES7 module system and TypeScript interface"
  },
  "react:template:class:component:redux connect class": {
    "prefix": "react_template_class_component_redux_connect",
    "body": [
      "import React, { Component } from 'react';",
      "import { connect } from 'react-redux';",
      "import { RootState } from 'path/to/rootReducer';",
      "",
      "interface PropsFromState {",
      "\t$1",
      "}",
      "",
      "interface PropsFromDispatch {",
      "\t$2",
      "}",
      "",
      "type Props = PropsFromState & PropsFromDispatch;",
      "",
      "class ${3:ComponentName} extends Component<Props> {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>$0</div>",
      "\t\t);",
      "\t}",
      "}",
      "",
      "const mapStateToProps = (state: RootState): PropsFromState => ({",
      "\t$4",
      "});",
      "",
      "const mapDispatchToProps: PropsFromDispatch = {",
      "\t$5",
      "};",
      "",
      "export default connect(",
      "\tmapStateToProps,",
      "\tmapDispatchToProps",
      ")(${3:ComponentName});"
    ],
    "description": "Create a connected React class component with Redux"
  },
  "react:template:func:component": {
    "prefix": "react_template_func_component",
    "body": [
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "function ${1:${TM_FILENAME_BASE}}(props) {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ],
    "description": "Creates a React Functional Component with ES7 module system with PropTypes"
  },
  "react:template:func:component:with type param": {
    "prefix": "react_template_func_component_with_type_param",
    "body": [
      "import React from 'react'",
      "",
      "type Props = {}",
      "",
      "function ${1:${TM_FILENAME_BASE}}({}: Props) {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Functional Component with ES7 module system and TypeScript interface"
  },
  "react:template:func:component:with props destructuring": {
    "prefix": "react_template_func_component_with_param_props_desctruction",
    "body": [
      "import React from 'react';",
      "",
      "interface Props {",
      "\t$1",
      "}",
      "",
      "const ${2:ComponentName}: React.FC<Props> = ({ ${3:prop1}, ${4:prop2} }) => {",
      "\treturn (",
      "\t\t<div>$0</div>",
      "\t);",
      "};",
      "",
      "export default ${2:ComponentName};"
    ],
    "description": "Create a React functional component with props destructuring"
  },
  "react:template:func:component:native functional": {
    "prefix": "react_template_func_component_native",
    "body": [
      "import { View, Text } from 'react-native'",
      "import React from 'react'",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "\treturn (",
      "\t\t<View>",
      "\t\t\t<Text>${1:first}</Text>",
      "\t\t</View>",
      "\t)",
      "}"
    ]
  },
  "react:template:func:component:with extends purecomponent": {
    "prefix": "react_template_func_component_native_with_extends_purecomponent",
    "body": [
      "import { Text, View } from 'react-native'",
      "import React, { PureComponent } from 'react'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<View>",
      "\t\t\t\t<Text>${1:first}</Text>",
      "\t\t\t</View>",
      "\t\t)",
      "\t}",
      "}"
    ]
  },
  "react:template:func:component:stateful": {
    "prefix": "react_template_func_component_stateful",
    "body": [
      "import React, { Component } from 'react';",
      "",
      "import { View } from 'react-native';",
      "",
      "// import { Container } from './styles';",
      "",
      "export default class ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}} extends Component {",
      "\trender() {",
      "\t\treturn <View />;",
      "\t}",
      "}",
      ""
    ],
    "description": "Create React Native Stateful Component"
  },
  "react:template:func:component:stateless": {
    "prefix": "react_template_func_component_stateless",
    "body": [
      "import React from 'react';",
      "",
      "import { View } from 'react-native';",
      "",
      "// import { Container } from './styles';",
      "",
      "const ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}} = () => <View />;",
      "",
      "export default ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}};",
      ""
    ],
    "description": "Create React Native Stateless Component"
  },
  "react:template:func:component:higher-order component (HOC)": {
    "prefix": "react_template_func_component_HOC",
    "body": [
      "import React from 'react';",
      "",
      "function with${1:HigherOrderComponent}(WrappedComponent: React.ComponentType<any>) {",
      "\treturn (props: any) => (",
      "\t\t<WrappedComponent {...props} />",
      "\t);",
      "}",
      "",
      "export default with${1:HigherOrderComponent};"
    ],
    "description": "Create a higher-order component in React"
  },
  "react:template:func:component:arrow:export": {
    "prefix": "react_template_func_component_arrow_export",
    "body": [
      "import React from 'react'",
      "",
      "type Props = {}",
      "",
      "const ${1:${TM_FILENAME_BASE}} = (props: Props) => {",
      "\treturn (",
      "\t\t<div>${1:first}</div>",
      "\t)",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system and TypeScript interface"
  },
  "react:template:func:component:arrow:native function component": {
    "prefix": "react_template_func_component_arrow_native_func_component",
    "body": [
      "import { View, Text } from 'react-native'",
      "import React from 'react'",
      "",
      "type Props = {}",
      "",
      "const ${1:${TM_FILENAME_BASE}} = (props: Props) => {",
      "\treturn (",
      "\t\t<View>",
      "\t\t\t<Text>${1:first}</Text>",
      "\t\t</View>",
      "\t)",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Native Arrow Function Component with ES7 module system in TypeScript"
  },
  "react:template:func:component:arrow:with proptypes": {
    "prefix": "react_template_func_component_arrow_with_prop_types",
    "body": [
      "import PropTypes from 'prop-types'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = props => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system with PropTypes"
  },
  "react:template:func:component:arrow:function component with styles": {
    "prefix": "react_template_func_component_arrow_export_in_native_with_styles",
    "body": [
      "import { StyleSheet, Text, View } from 'react-native'",
      "import React from 'react'",
      "",
      "type Props = {}",
      "",
      "const ${1:${TM_FILENAME_BASE}} = (props: Props) => {",
      "\treturn (",
      "\t\t<View>",
      "\t\t\t<Text>${1:first}</Text>",
      "\t\t</View>",
      "\t)",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      "",
      "const styles = StyleSheet.create({})"
    ],
    "description": "Creates a React Native Arrow Function Component with ES7 module system, TypeScript interface and StyleSheet"
  },
  "react:template:func:component:arrow:func export component": {
    "prefix": "react_template_func_component_arrow_export_only",
    "body": [
      "",
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system"
  },
  "react:template:func:component:arrow:redux proptypes": {
    "prefix": "react_template_func_component_arrow_redux_prop",
    "body": [
      "import PropTypes from 'prop-types'",
      "import React from 'react'",
      "import { connect } from 'react-redux'",
      "",
      "export const ${1:${TM_FILENAME_BASE}} = (props) => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {",
      "  ${2:second}: PropTypes.${3:third}",
      "}",
      "",
      "const mapStateToProps = (state) => ({})",
      "",
      "const mapDispatchToProps = {}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})"
    ],
    "description": "DEPRECATED: Creates a React functional component with PropTypes with connected redux and ES7 module system"
  },
  "react:template:func:component:arrow:redux connect functional component": {
    "prefix": "react_template_func_component_arrow_redux_connect",
    "body": [
      "import React from 'react';",
      "import { connect } from 'react-redux';",
      "import { RootState } from 'path/to/rootReducer';",
      "",
      "interface PropsFromState {",
      "\t$1",
      "}",
      "",
      "interface PropsFromDispatch {",
      "\t$2",
      "}",
      "",
      "type Props = PropsFromState & PropsFromDispatch;",
      "",
      "const ${3:ComponentName}: React.FC<Props> = ({ $4 }) => {",
      "\treturn (",
      "\t\t<div>$0</div>",
      "\t);",
      "};",
      "",
      "const mapStateToProps = (state: RootState): PropsFromState => ({",
      "\t$5",
      "});",
      "",
      "const mapDispatchToProps: PropsFromDispatch = {",
      "\t$6",
      "};",
      "",
      "export default connect(",
      "\tmapStateToProps,",
      "\tmapDispatchToProps",
      ")(${3:ComponentName});"
    ],
    "description": "Create a connected React functional component with Redux"
  },
  "react:template:func:component:arrow:redux func": {
    "prefix": "react_template_func_component_arrow_redux",
    "body": [
      "import React from 'react'",
      "import { connect } from 'react-redux'",
      "",
      "export const ${1:${TM_FILENAME_BASE}} = (props) => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "const mapStateToProps = (state) => ({})",
      "",
      "const mapDispatchToProps = {}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})"
    ],
    "description": "Creates a React functional component with connected redux and ES7 module system"
  },
  "react:template:func:component:arrow:proptypes functional": {
    "prefix": "react_template_func_component_arrow_props",
    "body": [
      "import PropTypes from 'prop-types';",
      "",
      "interface Props {",
      "\t$1",
      "}",
      "",
      "const ${2:ComponentName}: React.FC<Props> = ({ $3 }) => {",
      "\treturn (",
      "\t\t<div>$0</div>",
      "\t);",
      "};",
      "",
      "${2:ComponentName}.propTypes = {",
      "\t$4",
      "};",
      "",
      "export default ${2:ComponentName};"
    ],
    "description": "Declare PropTypes for props in a React functional component"
  },
  "react:template:func:component:arrow:memo": {
    "prefix": "react_template_func_component_arrow_memo",
    "body": [
      "import React, { memo } from 'react'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = memo(() => {",
      "\treturn (",
      "\t\t<div>${1:first}</div>",
      "\t)",
      "})",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Memo Function Component with ES7 module system"
  },
  "react:template:func:component:arrow:memo with proptypes": {
    "prefix": "react_template_func_component_arrow_memo_with_proptypes",
    "body": [
      "import PropTypes from 'prop-types'",
      "import React, { memo } from 'react'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = memo((props) => {",
      "\treturn (",
      "\t\t<div>${1:first}</div>",
      "\t)",
      "})",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Memo Function Component with ES7 module system with PropTypes"
  },
  "react:template:func:component:arrow:memo with custom comparison": {
    "prefix": "react_template_func_component_arrow_memo_with_custom_compare",
    "body": [
      "import React, { memo } from 'react';",
      "",
      "interface Props {",
      "\t$1",
      "}",
      "",
      "const ${2:ComponentName}: React.FC<Props> = ({ $3 }) => {",
      "\treturn (",
      "\t\t<div>$0</div>",
      "\t);",
      "};",
      "",
      "function areEqual(prevProps: Props, nextProps: Props) {",
      "\treturn true; // Define your comparison logic here",
      "}",
      "",
      "export default memo(${2:ComponentName}, areEqual);"
    ],
    "description": "Memoize a React functional component with custom comparison function using React.memo"
  },
  "react:template:func:component:arrow:proptypes component with destructuring": {
    "prefix": "react_template_func_component_arrow_proptypes_destructuring",
    "body": [
      "import PropTypes from 'prop-types';",
      "",
      "interface Props {",
      "\t${1:prop1}: ${2:Type};",
      "\t${3:prop2}: ${4:Type};",
      "}",
      "",
      "const ${5:ComponentName}: React.FC<Props> = ({ ${1:prop1}, ${3:prop2} }) => {",
      "\treturn (",
      "\t\t<div>$0</div>",
      "\t);",
      "};",
      "",
      "${5:ComponentName}.propTypes = {",
      "\t${1:prop1}: PropTypes.${6:isRequired},",
      "\t${3:prop2}: PropTypes.${7:isRequired}",
      "};",
      "",
      "export default ${5:ComponentName};"
    ],
    "description": "Declare PropTypes with destructuring for props in a React functional component"
  },
  "redux:redux reducer": {
    "prefix": "redux_reducer",
    "body": [
      "const initialState = {}",
      "",
      "export default (state = initialState, { type, payload }) => {",
      "\tswitch (type) {",
      "",
      "\t\tcase ${1:first}:",
      "\t\t\treturn { ...state, ...payload }",
      "",
      "\t\tdefault:",
      "\t\t\treturn state",
      "\t\t}",
      "}",
      ""
    ]
  },
  "redux:redux action": {
    "prefix": "redux_action",
    "body": [
      "export const ${1:first} = (payload) => ({",
      "  type: ${2:second},",
      "  payload",
      "})",
      ""
    ]
  },
  "redux:redux selector": {
    "prefix": "redux_selector",
    "body": [
      "import { createSelector } from 'reselect'",
      "",
      "export const ${1:first} = state => state.${2:second}"
    ]
  },
  "redux:redux const": {
    "prefix": "redux_const",
    "body": ["export const ${1:first} = '${1:first}'"]
  },
  "redux:redux slice": {
    "prefix": "redux_slice",
    "body": [
      "import { createSlice } from '@reduxjs/toolkit'",
      "",
      "const initialState = {",
      "",
      "}",
      "",
      "const ${1:${TM_FILENAME_BASE}} = createSlice({",
      "  name: ${2:second},",
      "  initialState,",
      "  reducers: {}",
      "});",
      "",
      "export const {} = ${1:${TM_FILENAME_BASE}}.actions",
      "",
      "export default ${1:${TM_FILENAME_BASE}}.reducer"
    ]
  },
  "redux:mapping to props": {
    "prefix": "redux_mappingToProps",
    "body": [
      "const mapStateToProps = (state) => ({})",
      "",
      "const mapDispatchToProps = {}"
    ]
  },
  "comment:big block": {
    "prefix": "comment_block",
    "body": ["/**", " * ${1:first}", " */"]
  },
  "getSnapshotBeforeUpdate": {
    "prefix": "gsbu",
    "body": [
      "getSnapshotBeforeUpdate = (prevProps, prevState) => {${1:first}}"
    ],
    "description": "Called right before mutations are made (e.g. before the DOM is updated)"
  },
  "getDerivedStateFromProps": {
    "prefix": "gdsfp",
    "body": ["static getDerivedStateFromProps(props, state) {${1:first}}"],
    "description": "Invoked right before calling the render method, both on the initial mount and on subsequent updates."
  },
  "type:exportType": {
    "prefix": "type_export",
    "body": ["export type ${1:first} = {${2:second}}"]
  }
}
