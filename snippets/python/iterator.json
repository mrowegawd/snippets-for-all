{
  "iter:map": {
    "prefix": "iter_map",
    "body": ["map(lambda x: x, ${1:iterable})"],
    "description": "Create a map iterator"
  },
  "iter:reduce": {
    "prefix": "iter_reduce",
    "body": [
      "import functools",
      "functools.reduce(lambda x, y: x + y, ${1:iterable})"
    ],
    "description": "Create a reduce iterator"
  },
  "iter:All": {
    "prefix": "iter_all",
    "body": ["all(x ${1:condition} for x in ${2:iterable})"],
    "description": "Create an all iterator"
  },
  "iter:Any": {
    "prefix": "iter_any",
    "body": ["any(x ${1:condition} for x in ${2:iterable})"],
    "description": "Create an any iterator"
  },
  "iter:find": {
    "prefix": "iter_find",
    "body": [
      "(next((x for x in ${1:iterable} if x ${2:condition}), ${3:default_value}))"
    ],
    "description": "Create a find iterator"
  },
  "iter:Found": {
    "prefix": "iter_found",
    "body": [
      "(next((x for x in ${1:iterable} if x ${2:condition}), ${3:default_value}))"
    ],
    "description": "Create a found iterator"
  },
  "iter:filter": {
    "prefix": "iter_filter",
    "body": ["filter(lambda x: x ${1:condition}, ${2:iterable})"],
    "description": "Create a filter iterator"
  },
  "iter:enumerate": {
    "prefix": "iter_enumerate",
    "body": ["enumerate(${1:iterable})"],
    "description": "Create an enumerate iterator"
  },
  "iter:zip": {
    "prefix": "iter_zip",
    "body": ["zip(${1:iterable1}, ${2:iterable2})"],
    "description": "Create a zip iterator"
  },
  "iter:sorted": {
    "prefix": "iter_sorted",
    "body": ["sorted(${1:iterable})"],
    "description": "Create a sorted iterator"
  },
  "iter:range": {
    "prefix": "iter_range",
    "body": ["range(${1:start}, ${2:stop}, ${3:step})"],
    "description": "Create a range iterator"
  },
  "iter:reversed": {
    "prefix": "iter_reversed",
    "body": ["reversed(${1:sequence})"],
    "description": "Create a reversed iterator"
  }
}
