{
  "#!/usr/bin/env python": {
    "prefix": "env_",
    "body": "#!/usr/bin/env python\n$0",
    "description": "#!/usr/bin/env python"
  },
  "#!/usr/bin/env python3": {
    "prefix": "env3_",
    "body": "#!/usr/bin/env python3\n$0",
    "description": "#!/usr/bin/env python3"
  },
  "# -*- coding=utf-8 -*-": {
    "prefix": "env_enc",
    "body": "# -*- coding=utf-8 -*-\n$0",
    "description": "# -*- coding=utf-8 -*-"
  },
  "# coding=utf-8": {
    "prefix": "env_enc8",
    "body": "# coding=utf-8\n$0",
    "description": "# coding=utf-8\n"
  },
  "TODO": {
    "prefix": "todo_",
    "body": ["# TODO: $0"],
    "description": "# TODO: ..."
  },
  "header{{{": {
    "prefix": "header_1",
    "body": [
      "# ${1:headname} ----------------------------------------------------------- {{{",
      "#",
      "$2",
      "#",
      "#  }}}"
    ],
    "description": "create header --- {{{"
  },
  "header###": {
    "prefix": "header_2",
    "body": [
      "###############################################################################",
      "${1:string_header}",
      "###############################################################################",
      "$2"
    ],
    "description": "create header --- ###"
  },
  "import": {
    "prefix": "imp_",
    "body": "import ${1:package/module}$0",
    "description": "import .."
  },
  "import as": {
    "prefix": "imp_as",
    "body": "import ${1:package/module} as ${2:names}$0",
    "description": "import .. as .."
  },
  "from ... import ...": {
    "prefix": "imp_from",
    "body": "from ${1:package/module} import ${2:names}$0",
    "description": "from package import names"
  },
  "from as": {
    "prefix": "imp_from_as",
    "body": "from ${1:package/module} import ${2:names} as ${3:names}$0",
    "description": "from package import names"
  },
  "import:dataclass": {
    "prefix": "imp_dataclass",
    "body": "from dataclasses import dataclass",
    "description": "from dataclasses import dataclass"
  },
  "from future import ...": {
    "prefix": "env_encf",
    "body": [
      "# -*- coding: utf-8 -*-",
      "from __future__ import absolute_import, division, print_function, unicode_literals"
    ],
    "description": [
      "\t# -*- coding: utf-8 -*-",
      "\tfrom __future__ import absolute_import, division, print_function, unicode_literals"
    ]
  },
  "from future import ... v1": {
    "prefix": "env_encfo",
    "body": [
      "# coding: utf-8",
      "from __future__ import absolute_import, division, print_function, unicode_literals"
    ],
    "description": [
      "\t# coding: utf-8",
      "\tfrom __future__ import absolute_import, division, print_function, unicode_literals"
    ]
  },
  "var:create": {
    "prefix": "var_",
    "body": ["${1:varName} = $0"],
    "description": "x = \"Hello world\""
  },
  "var:list": {
    "prefix": "var_list",
    "body": ["${1:varList} = [${2:1, True, \"hello\"}]", "$0"],
    "description": "var_list = [1, true, \"hello\"]"
  },
  "var:tuple": {
    "prefix": "var_tuple",
    "body": ["${1:varTuple} = (${2:1, [\"a\", \"b\", \"c\"], \"word\"})", "$0"],
    "description": "var_tuple = (1, \"its good\", [1,3,4])"
  },
  "var:set": {
    "prefix": "var_set",
    "body": ["${1:varSet} = {${2:1, \"hello\", [1,3,4,5]}}", "$0"],
    "description": "var_set = {1, \"its good\", [1,3,4]}"
  },
  "var:class": {
    "prefix": "var_obj_",
    "body": ["${1:varObj} = ${2:Myclass(1,3,45)}", "$0"],
    "description": "var_obj = Myclass(x, x)"
  },
  "var:dict": {
    "prefix": "var_dict",
    "body": ["${1:varDict} = {${2:\"name\": \"Daniel\", \"age\": 13}}", "$0"],
    "description": [
      "var_dict = {",
      "\t\"name\": \"Daniel\"",
      "\t\"age\": 13",
      "}"
    ]
  },
  "class": {
    "prefix": "class_",
    "body": ["class ${1:classname}(${2:object}):", "\t${3:pass}"],
    "description": ["class Classname}(object):", "\tpass"]
  },
  "class init": {
    "prefix": "class_init",
    "body": "class ${1:ClassName}(${2:object}):\n\t\"\"\"${3:docstring for $1.}\"\"\"\n\tdef __init__(self, ${4:arg}):\n\t\t${5:super($1, self).__init__()}\n\t\tself.arg = arg\n\t\t$0",
    "description": "class ${1:ClassName}(${2:object}):\n\t\"\"\"${3:docstring for $1.}\"\"\"\n\tdef __init__(self, ${4:arg}):\n\t\t${5:super($1, self).__init__()}\n\t\tself.arg = arg\n\t\t$0"
  },
  "class constructor": {
    "prefix": "class_constructor",
    "body": [
      "def __init__(self, ${1:x}):",
      "\tself.${1:x} = ${1:x}",
      "\t$0",
      ""
    ],
    "description": ["\tdef __init__(self, ${1:x}):", "\t\tself.${1:x} = ${1:x}"]
  },
  "class method w/ return": {
    "prefix": "class_method",
    "body": "def ${1:mname}(self, ${2:arg}) -> ${3:return_type}:\n\t${4:pass}$0",
    "description": "def fname(self, arg) -> return_type:\n\tpass"
  },
  "class:staticmethod": {
    "prefix": "class_method_static",
    "body": [
      "@staticmethod",
      "def ${1:funcname}(${2:parameter_list}):",
      "\t${3:pass}"
    ],
    "description": ["@staticmethod", "def fname(args):", "\t$pass"]
  },
  "class:property": {
    "prefix": "class_method_property",
    "body": "@property\ndef ${1:foo}(self):\n    \"\"\"${2:The $1 property.}\"\"\"\n    ${3:return self._$1}\n@${4:$1}.setter\ndef ${5:$1}(self, value):\n    ${6:self._$1} = value",
    "description": "@property\ndef ${1:foo}(self):\n    \"\"\"${2:The $1 property.}\"\"\"\n    ${3:return self._$1}\n@${4:$1}.setter\ndef ${5:$1}(self, value):\n    ${6:self._$1} = value"
  },
  "class:dataclass": {
    "prefix": "class_data",
    "body": "@dataclass\nclass ${1:your_class_name}:\n\t${2:your_proerty:str}\n\t${3:data1: float = 1.3}\n\t${0}",
    "description": "@dataclass\nclass MyClass:\n\tname: str\n\tunit_price: float = 1.3"
  },
  "function": {
    "prefix": "def_",
    "body": "def ${1:fname}(${2:arg}):\n\t${3:pass}$0",
    "description": "def fname(arg):\n\tpass"
  },
  "async:function": {
    "prefix": "def_a_",
    "body": "async def ${1:fname}(${2:arg}):\n\t${3:pass}$0",
    "description": "async def fname(args):\n\tpass"
  },
  "return": {
    "prefix": "rt_",
    "body": "return ${0:this}"
  },
  "return set": {
    "prefix": "rt_tuple",
    "body": "return ${1:name}, ${2:name2}$0"
  },
  "return func": {
    "prefix": "rt_func",
    "body": ["def myfunc2()", "\treturn \"hello world \"", "\treturn myfunc2()"]
  },
  "if": {
    "prefix": "if_",
    "body": "if ${1:condition}:\n\t${2:pass}$0",
    "description": "if condition:\n\tpass"
  },
  "if:else": {
    "prefix": "if_else",
    "body": ["if ${1:condition}:", "\t${2:pass}", "else:", "\t${3:pass}"],
    "description": ["if condition:", "\tpass", "else:", "\tpass"]
  },
  "elif": {
    "prefix": "elif_",
    "body": ["elif ${1:expression}:", "\t${2:pass}"],
    "description": ["elif expression:", "\tpass"]
  },
  "else": {
    "prefix": "else_",
    "body": ["else:", "\t${1:pass}"],
    "description": ["else:", "\tpass"]
  },
  "for": {
    "prefix": "for_",
    "body": "for ${1:value} in ${2:iterable}:\n\t${3:pass}$0",
    "description": "for value in iterable:\n\tpass"
  },
  "for:else": {
    "prefix": "for_else",
    "body": [
      "for ${1:target} in ${2:iterable}:",
      "\t${3:pass}",
      "else:",
      "\t${4:pass}"
    ],
    "description": ["for value in iterable:", "\tpass", "else:", "\tpass"]
  },
  "async:for": {
    "prefix": "for_a_",
    "body": ["async for ${1:target} in ${2:iterable}:", "\t${3:pass}"],
    "description": ["async for value in iterable:", "\tpass"]
  },
  "async:for:else": {
    "prefix": "for_a_else",
    "body": [
      "async for ${1:target} in ${2:iterable}:",
      "\t${3:pass}",
      "else:",
      "\t${4:pass}"
    ],
    "description": ["async for value in iterable:", "\tpass", "else:", "\tpass"]
  },
  "while": {
    "prefix": "while_",
    "body": "while ${1:condition}:\n\t${2:pass}$0",
    "description": "while condition:\n\tpass"
  },
  "while:else": {
    "prefix": "while_else",
    "body": ["while ${1:expression}:", "\t${2:pass}", "else:", "\t${3:pass}"],
    "description": ["while expression:", "\tpass", "else:", "\tpass"]
  },
  "try:except:": {
    "prefix": "try_",
    "body": "try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}$0",
    "description": "try:\n\tpass\nexcept Exception as e:\n\traise"
  },
  "try:except:else": {
    "prefix": "try_else",
    "body": "try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nelse:\n\t${5:pass}$0",
    "description": "try:\n\tpass\nexcept Exception as e:\n\traise\nelse:\n\tpass"
  },
  "try:except:finally": {
    "prefix": "try_finally",
    "body": "try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nfinally:\n\t${5:pass}$0",
    "description": "try:\n\tpass\nexcept Exception as e:\n\traise\nfinally:\n\tpass"
  },
  "try:except:else:finally": {
    "prefix": "try_finally_else",
    "body": "try:\n\t${1:pass}\nexcept${2: ${3:Exception} as ${4:e}}:\n\t${5:raise}\nelse:\n\t${6:pass}\nfinally:\n\t${7:pass}$0",
    "description": "try:\n\tpass\nexcept Exception as e:\n\traise\nelse:\n\tpass\nfinally:\n\tpass"
  },
  "throw raise": {
    "prefix": "throw_r",
    "body": "raise ${1:Exception}(${2:\"your message \"})",
    "description": "raise Exception(\"your message \")"
  },
  "with": {
    "prefix": "with_",
    "body": ["with ${1:expression} as ${2:target}:", "\t${3:pass}"],
    "description": ["with expression as target:", "\tpass"]
  },
  "async:with": {
    "prefix": "with_async",
    "body": ["async with ${1:expression} as ${2:target}:", "\t${3:pass}"],
    "description": ["async with expression as target:", "\tpass"]
  },
  "__magic__": {
    "prefix": "__",
    "body": "__${1:init}__$0",
    "description": "__<init>__"
  },
  "lambda": {
    "prefix": "lambda_",
    "body": ["lambda ${1:parameter_list}: ${2:expression}"],
    "description": ["lambda a: a + 10", "lambda (a, b): a + b"]
  },
  "assert": {
    "prefix": "assert_",
    "body": "assert ${1:var} == ${2:var}, ${3:default_value}",
    "description": "assert var1 == var2, value"
  },
  "if __name__ == \"__main__\"": {
    "prefix": "if_main",
    "body": "if __name__ == \"__main__\":\n\t${1:main()}$0",
    "description": "if __name__ == \"__main__\":\n\tpass"
  }
}
