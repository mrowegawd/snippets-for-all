{
  "merge:two lists": {
    "prefix": "merge_lists",
    "body": ["merged_list = list1 + list2"],
    "description": "Merge two lists into one"
  },
  "merge:two lists with zip function": {
    "prefix": "merge_lists_zip",
    "body": ["merged_list = list(zip(list1, list2))"],
    "description": "Merge lists using zip function"
  },
  "merge:two lists using extend method": {
    "prefix": "merge_lists_with_extend",
    "body": ["list1.extend(list2)", "merged_list = list1"],
    "description": "Merge lists using the extend method"
  },
  "merge:two dictionaries": {
    "prefix": "merge_dicts",
    "body": ["merged_dict = {**dict1, **dict2}"],
    "description": "Merge two dictionaries into one"
  },
  "merge:two dictionaries using update method": {
    "prefix": "merge_dicts_update",
    "body": ["dict1.update(dict2)", "merged_dict = dict1"],
    "description": "Merge dictionaries using the update method"
  },
  "merge:two dictionaries using update operator": {
    "prefix": "merge_dicts_update_operator",
    "body": ["merged_dict = {**dict1, **dict2}"],
    "description": "Merge dictionaries using the update operator"
  },
  "merge:two dictionaries using chainmap": {
    "prefix": "merge_dicts_chainmap",
    "body": [
      "from collections import ChainMap",
      "",
      "merged_dict = dict(ChainMap(dict1, dict2))"
    ],
    "description": "Merge dictionaries using ChainMap"
  },
  "merge:two sets": {
    "prefix": "merge_sets",
    "body": ["merged_set = set1.union(set2)"],
    "description": "Merge two sets into one"
  },
  "merge:two strings": {
    "prefix": "merge_strings",
    "body": ["merged_string = string1 + string2"],
    "description": "Merge two strings into one"
  },
  "merge:two tuples": {
    "prefix": "merge_tuples",
    "body": ["merged_tuple = tuple1 + tuple2"],
    "description": "Merge two tuples into one"
  },
  "merge:pandas:with dataframes": {
    "prefix": "merge_pd_dataframes",
    "body": ["merged_df = pd.concat([df1, df2], axis=0, ignore_index=True)"],
    "description": "Merge two pandas DataFrames into one"
  },
  "merge:numpy:two arrays": {
    "prefix": "merge_np_arrays",
    "body": ["merged_array = np.concatenate((array1, array2), axis=0)"],
    "description": "Merge two numpy arrays into one"
  },
  "merge:functools:using reduce function": {
    "prefix": "merge_functools_reduce",
    "body": [
      "from functools import reduce",
      "",
      "merged_list = reduce(lambda x, y: x + y, [list1, list2])"
    ],
    "description": "Merge lists using reduce function"
  },
  "merge:functools:with reduce function": {
    "prefix": "merge_functools_reduce_def",
    "body": [
      "from functools import reduce",
      "",
      "def merge_with_reduce(list_of_objs):",
      "\tmerged_obj = reduce(lambda x, y: {**x, **y}, list_of_objs)",
      "\treturn merged_obj"
    ],
    "description": "Merge multiple dictionaries using reduce"
  },
  "merge:listcomprehension:using list comprehension": {
    "prefix": "merge_list_comp",
    "body": [
      "merged_list = [item for sublist in [list1, list2] for item in sublist]"
    ],
    "description": "Merge lists using list comprehension"
  },
  "merge:itertools:iterables using itertools.chain": {
    "prefix": "merge_iteratools_chain",
    "body": [
      "import itertools",
      "",
      "merged_iterable = list(itertools.chain(iterable1, iterable2))"
    ],
    "description": "Merge two iterables using itertools.chain"
  }
}
