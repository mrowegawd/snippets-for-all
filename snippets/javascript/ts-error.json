{
  "err:t:throw Error": {
    "prefix": "err_t_throw_error",
    "body": ["throw new Error(\"${1:error message}\");"],
    "description": "Throws a new Error with a custom message in TypeScript"
  },
  "err:custom:Error Handling with function": {
    "prefix": "err_custom_error_function",
    "body": [
      "// Custom Error Handling Function",
      "function handleCustomError(error: Error): void {",
      "\tconsole.error('Custom error occurred:', error.message);",
      "\t// Additional handling logic here",
      "}",
      "",
      "// Example of Using Custom Error Handling Function",
      "try {",
      "\t$1",
      "} catch (error) {",
      "\thandleCustomError(error);",
      "}"
    ],
    "description": "TypeScript custom error handling function snippet"
  },
  "err:custom:class": {
    "prefix": "err_custom_error_class",
    "body": [
      "// Custom error class",
      "class ${1:CustomError} extends Error {",
      "\tconstructor(message: string) {",
      "\t\tsuper(message);",
      "\t\tObject.setPrototypeOf(this, ${1:CustomError}.prototype);",
      "\t}",
      "}",
      "",
      "// Example usage:",
      "//",
      "// try {",
      "// \tthrow new ${1:CustomError}(\"error message\");",
      "// } catch (err) {",
      "// \tif (err instanceof ${1:CustomError}) {",
      "// \t\tconsole.error(err.message);",
      "// \t\t// handle error",
      "// \t}",
      "// }",
      ""
    ],
    "description": "Creates a custom error class in TypeScript"
  },
  "err:custom:with properties": {
    "prefix": "err_custom_error_class_with_properties",
    "body": [
      "// Custom error class with additional properties",
      "class ${1:CustomError} extends Error {",
      "\t${2:property}: ${3:type};",
      "",
      "\tconstructor(message: string, ${2:property}: ${3:type}) {",
      "\t\tsuper(message);",
      "\t\tthis.${2:property} = ${2:property};",
      "\t\tObject.setPrototypeOf(this, ${1:CustomError}.prototype);",
      "\t}",
      "}",
      "",
      "// Example usage:",
      "//",
      "// try {",
      "// \tthrow new ${1:CustomError}(\"error message\", ${2:value});",
      "// } catch (err) {",
      "// \tif (err instanceof ${1:CustomError}) {",
      "// \t\tconsole.error(err.message);",
      "// \t\tconsole.error(err.${2:property});",
      "// \t\t// handle error",
      "// \t}",
      "// }",
      ""
    ],
    "description": "Creates a custom error class with additional properties in TypeScript"
  },
  "err:custom:with stack trace": {
    "prefix": "err_custom_error_class_with_stack_trace",
    "body": [
      "// Custom error class with stack trace",
      "class ${1:CustomError} extends Error {",
      "\tstackTrace: string[];",
      "",
      "\tconstructor(message: string) {",
      "\t\tsuper(message);",
      "\t\tthis.stackTrace = this.captureStackTrace();",
      "\t\tObject.setPrototypeOf(this, ${1:CustomError}.prototype);",
      "\t}",
      "",
      "\tprivate captureStackTrace(): string[] {",
      "\t\tconst stack = new Error().stack?.split('\\n').slice(1);",
      "\t\treturn stack || [];",
      "\t}",
      "}",
      "",
      "// Example usage:",
      "//",
      "// try {",
      "// \tthrow new ${1:CustomError}(\"error message\");",
      "// } catch (err) {",
      "// \tif (err instanceof ${1:CustomError}) {",
      "// \t\tconsole.error(err.message);",
      "// \t\tconsole.error(err.stackTrace);",
      "// \t\t// handle error",
      "// \t}",
      "// }",
      ""
    ],
    "description": "Creates a custom error class with stack trace in TypeScript"
  },
  "err:custom:with context": {
    "prefix": "err_custom_error_class_with_context",
    "body": [
      "// Custom error class with context",
      "class ${1:CustomError} extends Error {",
      "\tcontext: Record<string, any>;",
      "",
      "\tconstructor(message: string, context: Record<string, any> = {}) {",
      "\t\tsuper(message);",
      "\t\tthis.context = context;",
      "\t\tObject.setPrototypeOf(this, ${1:CustomError}.prototype);",
      "\t}",
      "}",
      "",
      "// Example usage:",
      "//",
      "// const context = {",
      "// \tkey: value,",
      "// };",
      "// try {",
      "// \tthrow new ${1:CustomError}(\"error message\", context);",
      "// } catch (err) {",
      "// \tif (err instanceof ${1:CustomError}) {",
      "// \t\tconsole.error(err.message);",
      "// \t\tconsole.error(err.context);",
      "// \t\t// handle error",
      "// \t}",
      "// }",
      ""
    ],
    "description": "Creates a custom error class with context in TypeScript"
  },
  "err:custom:with nested error": {
    "prefix": "err_custom_error_class_with_nested_error",
    "body": [
      "// Custom error class with nested error",
      "class ${1:CustomError} extends Error {",
      "\tnestedError: Error | null;",
      "",
      "\tconstructor(message: string, nestedError: Error | null = null) {",
      "\t\tsuper(message);",
      "\t\tthis.nestedError = nestedError;",
      "\t\tObject.setPrototypeOf(this, ${1:CustomError}.prototype);",
      "\t}",
      "}",
      "",
      "// Example usage:",
      "//",
      "// try {",
      "// \tthrow new ${1:CustomError}(\"error message\", originalError);",
      "// } catch (err) {",
      "// \tif (err instanceof ${1:CustomError}) {",
      "// \t\tconsole.error(err.message);",
      "// \t\tif (err.nestedError) {",
      "// \t\t\tconsole.error(err.nestedError);",
      "// \t\t}",
      "// \t\t// handle error",
      "// \t}",
      "// }",
      ""
    ],
    "description": "Creates a custom error class with nested error in TypeScript"
  },
  "err:custom:with HTTP status code": {
    "prefix": "err_custom_error_class_with_http_status_code",
    "body": [
      "// Custom error class with HTTP status code",
      "class ${1:HttpError} extends Error {",
      "\tstatusCode: number;",
      "",
      "\tconstructor(message: string, statusCode: number) {",
      "\t\tsuper(message);",
      "\t\tthis.statusCode = statusCode;",
      "\t\tObject.setPrototypeOf(this, ${1:HttpError}.prototype);",
      "\t}",
      "}",
      "",
      "// Example usage:",
      "//",
      "// try {",
      "// \tthrow new ${1:HttpError}(\"not found\", 404);",
      "// } catch (err) {",
      "// \tif (err instanceof ${1:HttpError}) {",
      "// \t\tconsole.error(err.message);",
      "// \t\tconsole.error(err.statusCode);",
      "// \t\t// handle error",
      "// \t}",
      "// }",
      ""
    ],
    "description": "Creates a custom error class with HTTP status code in TypeScript"
  },
  "err:custom:with custom validation error": {
    "prefix": "err_custom_error_class_with_custom_validation_error",
    "body": [
      "// Custom validation error class",
      "class ${1:ValidationError} extends Error {",
      "\terrors: Record<string, string[]>;",
      "",
      "\tconstructor(errors: Record<string, string[]>) {",
      "\t\tsuper(\"Validation failed\");",
      "\t\tthis.errors = errors;",
      "\t\tObject.setPrototypeOf(this, ${1:ValidationError}.prototype);",
      "\t}",
      "}",
      "",
      "// Example usage:",
      "//",
      "// const validationErrors = {",
      "// \tfield1: [\"error message 1\"],",
      "// \tfield2: [\"error message 2\"],",
      "// };",
      "// try {",
      "// \tthrow new ${1:ValidationError}(validationErrors);",
      "// } catch (err) {",
      "// \tif (err instanceof ${1:ValidationError}) {",
      "// \t\tconsole.error(err.message);",
      "// \t\tconsole.error(err.errors);",
      "// \t\t// handle error",
      "// \t}",
      "// }",
      ""
    ],
    "description": "Creates a custom validation error class in TypeScript"
  },
  "err:custom:with unique ID": {
    "prefix": "err_custom_error_class_with_unique_id",
    "body": [
      "// Custom error class with unique ID",
      "class ${1:CustomError} extends Error {",
      "\tuuid: string;",
      "",
      "\tconstructor(message: string, uuid: string) {",
      "\t\tsuper(message);",
      "\t\tthis.uuid = uuid;",
      "\t\tObject.setPrototypeOf(this, ${1:CustomError}.prototype);",
      "\t}",
      "}",
      "",
      "// Example usage:",
      "//",
      "// const uuid = \"abc123\"; // generate or provide a unique ID",
      "// try {",
      "// \tthrow new ${1:CustomError}(\"error message\", uuid);",
      "// } catch (err) {",
      "// \tif (err instanceof ${1:CustomError}) {",
      "// \t\tconsole.error(err.message);",
      "// \t\tconsole.error(err.uuid);",
      "// \t\t// handle error",
      "// \t}",
      "// }",
      ""
    ],
    "description": "Creates a custom error class with unique ID in TypeScript"
  }
}
