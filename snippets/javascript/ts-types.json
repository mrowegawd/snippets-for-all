{
  "types:check:typeof:checking with typeof": {
    "prefix": "type_check_typeof",
    "body": ["typeof ${1:variable} === '${2:string}'"],
    "description": "Type checking using typeof operator"
  },
  "types:check:typeof:narrowing with typeof and type guards": {
    "prefix": "type_check_typeof_and_type_guards",
    "body": [
      "if (typeof ${1:variable} === '${2:object}') {",
      "    const ${3:variable} = ${1:variable} as ${2:object};",
      "    // ${1:variable} is of type ${2:object}",
      "} else {",
      "    // ${1:variable} is not of type ${2:object}",
      "}"
    ],
    "description": "Type narrowing using typeof and type guards in TypeScript"
  },
  "types:check:instanceof:checking with instanceof": {
    "prefix": "type_check_instanceof",
    "body": ["${1:variable} instanceof ${2:ClassName}"],
    "description": "Type checking using instanceof operator"
  },
  "types:check:instanceof:guard with instanceof (for custom classes)": {
    "prefix": "type_check_instanceof_guard",
    "body": [
      "if (${1:variable} instanceof ${2:ClassName}) {",
      "    // ${1:variable} is an instance of ${2:ClassName}",
      "} else {",
      "    // ${1:variable} is not an instance of ${2:ClassName}",
      "}"
    ],
    "description": "Type guard using instanceof for custom classes in TypeScript"
  },
  "types:check:guard with Array.isArray()": {
    "prefix": "type_check_array_isarray_guard",
    "body": [
      "if (Array.isArray(${1:variable})) {",
      "    // ${1:variable} is an array",
      "} else {",
      "    // ${1:variable} is not an array",
      "}"
    ],
    "description": "Type guard using Array.isArray() in TypeScript"
  },
  "types:check:guard checking with typeof and type guards": {
    "prefix": "type_check_typeof_guard_with_type_guards",
    "body": [
      "function is${1:Type}(obj: any): obj is ${1:Type} {",
      "    return typeof obj === '${2:type}';",
      "}",
      "",
      "const ${3:variable}: any = ${4:getValue}();",
      "if (is${1:Type}(${3:variable})) {",
      "    // ${3:variable} is of type ${1:Type}",
      "} else {",
      "    // ${3:variable} is not of type ${1:Type}",
      "}"
    ],
    "description": "Type checking with typeof and type guards in TypeScript"
  },
  "types:check:in:with 'in' operator": {
    "prefix": "type_check_in_operator",
    "body": [
      "if ('${1:property}' in ${2:object}) {",
      "    // ${1:property} exists in ${2:object}",
      "} else {",
      "    // ${1:property} does not exist in ${2:object}",
      "}"
    ],
    "description": "Type narrowing using 'in' operator in TypeScript"
  },
  "types:check:in:checking with 'in' operator (for object keys)": {
    "prefix": "type_check_in_operator_object_keys",
    "body": [
      "if ('${1:key}' in ${2:object}) {",
      "    const ${3:value} = ${2}.${1:key};",
      "    // Handle ${3:value} of type ${4:ValueType}",
      "} else {",
      "    // '${1:key}' does not exist in ${2:object}",
      "}"
    ],
    "description": "Type checking using 'in' operator for object keys in TypeScript"
  },
  "types:check:conditional type assignments": {
    "prefix": "type_check_conditional_assignment",
    "body": [
      "type ${1:ResultType} = ${2:Condition} extends true ? ${3:TypeIfTrue} : ${4:TypeIfFalse};"
    ],
    "description": "Conditional type assignments in TypeScript"
  },
  "types:check:keyof:checking with keyof": {
    "prefix": "type_check_keyof",
    "body": [
      "type ${1:Key} = keyof ${2:ObjectType};",
      "const ${3:key}: ${1:Key} = '${4:propertyName}';",
      "const ${5:value} = ${2}.${3:key};"
    ],
    "description": "Type checking using keyof operator in TypeScript"
  },
  "types:check:keyof::checking with keyof for generic types": {
    "prefix": "type_check_keyof_for_generic_types",
    "body": [
      "type ${1:Key} = keyof ${2:T};",
      "function getProperty(obj: ${2:T}, key: ${1:Key}): ${3:T[${1:Key}] | undefined} {",
      "    return obj[key];",
      "}"
    ],
    "description": "Type checking using keyof operator for generic types in TypeScript"
  },
  "types:check:assertion:for Promise resolving": {
    "prefix": "type_check_assertion_promise_resolving",
    "body": [
      "${1:promise}.then((${2:result}) => {",
      "    const ${3:resolvedValue} = ${2:result} as ${4:ResolvedType};",
      "    // Handle ${3:resolvedValue} of type ${4:ResolvedType}",
      "}).catch((${5:error}) => {",
      "    // Handle ${5:error}",
      "});"
    ],
    "description": "Type assertion for Promise resolving in TypeScript"
  },
  "types:check:with ternary style": {
    "prefix": "type_check_ternary",
    "body": [
      "type ${1:TypeCheck} = ${2:Condition} ? ${3:TypeIfTrue} : ${4:TypeIfFalse};"
    ],
    "description": "Conditional type checks in TypeScript"
  },
  "types:check:for null and undefined": {
    "prefix": "type_check_null_and_undefined",
    "body": [
      "if (${1:variable} !== null && ${1:variable} !== undefined) {",
      "    // ${1:variable} is not null or undefined",
      "} else {",
      "    // ${1:variable} is null or undefined",
      "}"
    ],
    "description": "Type checking for null and undefined in TypeScript"
  },
  "types:check:in promise handling": {
    "prefix": "type_check_promise_handling",
    "body": [
      "${1:promise}.then((${2:result}: ${3:ResponseType}) => {",
      "    // Handle ${2:result} of type ${3:ResponseType}",
      "}).catch((${4:error}: any) => {",
      "    // Handle ${4:error}",
      "});"
    ],
    "description": "Type checking in promise handling in TypeScript"
  },
  "types:callback:with single type": {
    "prefix": "type_callback_func",
    "body": [
      "type ${1:CallbackName} = (${2:params}: ${3:type}) => ${4:void};",
      "$0"
    ],
    "description": "Creates a callback function type"
  },
  "types:callback:with multiple parameters": {
    "prefix": "type_callback_func_param_multi",
    "body": [
      "type ${1:CallbackName} = (${2:param1}: ${3:type1}, ${4:param2}: ${5:type2}) => ${6:void};",
      "$0"
    ],
    "description": "Creates a callback function type with multiple parameters"
  },
  "types:callback:with return value": {
    "prefix": "type_callback_func_return",
    "body": [
      "type ${1:CallbackName} = (${2:params}: ${3:type}) => ${4:returnType};",
      "$0"
    ],
    "description": "Creates a callback function type with return value"
  },
  "types:callback:generic": {
    "prefix": "type_callback_func_generic",
    "body": [
      "type ${1:CallbackName}<${2:T}> = (${3:params}: ${4:T}) => ${5:void};",
      "$0"
    ],
    "description": "Creates a generic callback function type"
  },
  "types:callback:as object property": {
    "prefix": "type_callbac_prop_interface",
    "body": [
      "type ${1:CallbackName} = (${2:params}: ${3:type}) => ${4:void};",
      "",
      "interface ${5:ComponentProps} {",
      "    ${6:on${7:EventName}}: ${1:CallbackName};",
      "}",
      "$0"
    ],
    "description": "Creates a callback function type as an object property"
  },
  "types:callback:async:with single type": {
    "prefix": "type_callback_async_func",
    "body": [
      "type ${1:CallbackName} = (${2:params}: ${3:type}) => Promise<${4:void}>;",
      "$0"
    ],
    "description": "Creates an async callback function type"
  },
  "types:callback:async:with multiple parameters": {
    "prefix": "type_callback_async_func_param_multi",
    "body": [
      "type ${1:CallbackName} = (${2:param1}: ${3:type1}, ${4:param2}: ${5:type2}) => Promise<${6:void}>;",
      "$0"
    ],
    "description": "Creates an async callback function type with multiple parameters"
  },
  "types:callback:async:with return value": {
    "prefix": "type_callback_async_func_return",
    "body": [
      "type ${1:CallbackName} = (${2:params}: ${3:type}) => Promise<${4:returnType}>;",
      "$0"
    ],
    "description": "Creates an async callback function type with return value"
  },
  "types:callback:async:generic": {
    "prefix": "type_callback_async_generic",
    "body": [
      "type ${1:CallbackName}<${2:T}> = (${3:params}: ${4:T}) => Promise<${5:void}>;",
      "$0"
    ],
    "description": "Creates a generic async callback function type"
  },
  "types:callback:async:as object property": {
    "prefix": "type_callback_async_prop_interface",
    "body": [
      "type ${1:CallbackName} = (${2:params}: ${3:type}) => Promise<${4:void}>;",
      "",
      "interface ${5:ComponentProps} {",
      "    ${6:on${7:EventName}}: ${1:CallbackName};",
      "}",
      "$0"
    ],
    "description": "Creates an async callback function type as an object property"
  },
  "types:callback:async:with async keyword": {
    "prefix": "type_callback_async_func_async",
    "body": [
      "type ${1:CallbackName} = async (${2:params}: ${3:type}) => Promise<${4:void}>;",
      "$0"
    ],
    "description": "Creates an async callback function type with async keyword"
  },
  "types:callback:async:with generic promise": {
    "prefix": "type_callback_async_func_using_generic_promise",
    "body": [
      "type ${1:CallbackName} = (${2:params}: ${3:type}) => ${4:Promise<${5:void}>>};",
      "$0"
    ],
    "description": "Creates an async callback function type using generic Promise"
  },
  "types:callback:async:with optional return type": {
    "prefix": "type_callback_async_func_return_type",
    "body": [
      "type ${1:CallbackName} = (${2:params}: ${3:type}) => Promise<${4:returnType | void}>;",
      "$0"
    ],
    "description": "Creates an async callback function type with optional return type"
  },
  "types:callback:async:with return type as object": {
    "prefix": "type_callback_async_func_return_obj",
    "body": [
      "type ${1:CallbackName} = (${2:params}: ${3:type}) => Promise<${4:{ key: ${5:type}; } | void}>;",
      "$0"
    ],
    "description": "Creates an async callback function type with return type as object"
  }
}
