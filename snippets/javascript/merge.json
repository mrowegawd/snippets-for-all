{
  "merge:objects": {
    "prefix": "merge_object",
    "body": [
      "interface MyObject {",
      "    ${1:key1}: ${2:Type1};",
      "    ${3:key2}: ${4:Type2};",
      "}",
      "",
      "const obj1: MyObject = { ${1:key1}: ${5:value1}, ${3:key2}: ${6:value2} };",
      "const obj2: Partial<MyObject> = { ${1:key1}: ${7:newValue} };",
      "const mergedObject: MyObject = { ...obj1, ...obj2 };",
      "$0"
    ],
    "description": "Merge two objects in TypeScript"
  },
  "merge:objects:spread": {
    "prefix": "merge_object_spread",
    "body": [
      "// Merge two objects using spread operator",
      "type MyObject = {",
      "    ${1:key1}: ${2:Type1};",
      "    ${3:key2}: ${4:Type2};",
      "};",
      "",
      "const obj1: MyObject = { ${1:key1}: ${5:value1}, ${3:key2}: ${6:value2} };",
      "const obj2: Partial<MyObject> = { ${1:key1}: ${7:newValue} };",
      "const mergedObject: MyObject = { ...obj1, ...obj2 };",
      "$0"
    ],
    "description": "Merge two objects using spread operator in TypeScript"
  },
  "merge:array": {
    "prefix": "merge_array",
    "body": [
      "const arr1: ${1:Type}[] = [${2:value1}, ${3:value2}, ${4:value3}];",
      "const arr2: ${1:Type}[] = [${5:value4}, ${6:value5}];",
      "const mergedArray: ${1:Type}[] = [...arr1, ...arr2];",
      "$0"
    ],
    "description": "Concatenate two arrays in TypeScript"
  },
  "merge:tuple": {
    "prefix": "merge_tuple",
    "body": [
      "let tuple1: [${1:Type1}, ${2:Type2}] = [${3:value1}, ${4:value2}];",
      "let tuple2: [${1:Type1}, ${5:Type3}] = [${6:value3}, ${7:value4}];",
      "let mergedTuple: [${1:Type1}, ${2:Type2}, ${5:Type3}] = [...tuple1, ...tuple2.slice(1)];",
      "$0"
    ],
    "description": "Concatenate two tuples in TypeScript"
  },
  "merge:enum": {
    "prefix": "merge:enum",
    "body": [
      "// Merge two enums",
      "enum MyEnum1 {",
      "    Option1 = '${1:value1}',",
      "    Option2 = '${2:value2}',",
      "}",
      "",
      "enum MyEnum2 {",
      "    Option3 = '${3:value3}',",
      "    Option4 = '${4:value4}',",
      "}",
      "",
      "// Merge enums",
      "type MergedEnum = MyEnum1 | MyEnum2;",
      "$0"
    ],
    "description": "Merge two enums in TypeScript"
  },
  "merge:map": {
    "prefix": "merge_map",
    "body": [
      "const mergedMap = new Map([...${1:target}, ...${2:source}]);",
      "$0"
    ],
    "description": "Merge maps"
  },
  "merge:set": {
    "prefix": "merge_set",
    "body": [
      "const mergedSet = new Set([...${1:target}, ...${2:source}]);",
      "$0"
    ],
    "description": "Merge sets"
  },
  "merge:method:object.assign": {
    "prefix": "merge_metod_object_assign",
    "body": [
      "${1:target} = Object.assign({}, ${1:target}, ${2:source});",
      "$0"
    ],
    "description": "Merge objects using Object.assign"
  },
  "merge:interface": {
    "prefix": "merge_interface",
    "body": [
      "interface MyInterface {",
      "    ${1:prop1}: ${2:Type1};",
      "    ${3:prop2}: ${4:Type2};",
      "}",
      "",
      "const obj1: MyInterface = { ${1:prop1}: ${5:value1}, ${3:prop2}: ${6:value2} };",
      "const obj2: Partial<MyInterface> = { ${3:prop2}: ${7:newValue} };",
      "const mergedObject: MyInterface = { ...obj1, ...obj2 };",
      "$0"
    ],
    "description": "Merge two interfaces in TypeScript"
  },
  "merge:type:union": {
    "prefix": "merge_type_union",
    "body": [
      "// Merge two union types",
      "type UnionType1 = ${1:Type1} | ${2:Type2};",
      "type UnionType2 = ${3:Type3} | ${4:Type4};",
      "type MergedUnion = UnionType1 & UnionType2;",
      "$0"
    ],
    "description": "Merge two union types in TypeScript"
  },
  "merge:type:generic": {
    "prefix": "merge_type_generic",
    "body": [
      "type MyGeneric<T> = {",
      "    ${1:key1}: T;",
      "    ${2:key2}: T;",
      "};",
      "",
      "const obj1: MyGeneric<${3:Type}> = { ${1:key1}: ${4:value1}, ${2:key2}: ${5:value2} };",
      "const obj2: MyGeneric<${3:Type}> = { ${1:key1}: ${6:value3}, ${2:key2}: ${7:value4} };",
      "const mergedObject: MyGeneric<${3:Type}> = { ...obj1, ...obj2 };",
      "$0"
    ],
    "description": "Merge two generic types in TypeScript"
  },
  "merge:type:assertions": {
    "prefix": "merge_type_assertions",
    "body": [
      "// Merge two type assertions",
      "let value1: ${1:Type1} = ${2:value};",
      "let value2: ${3:Type2} = ${4:value};",
      "let mergedValue = value1 as ${5:Type1 & Type2};",
      "$0"
    ],
    "description": "Merge two type assertions in TypeScript"
  },
  "merge:type:union:discriminant": {
    "prefix": "merge_type_union_discriminant",
    "body": [
      "// Merge two union types with discriminant properties",
      "interface TypeA {",
      "    type: 'A';",
      "    ${1:propA}: ${2:Type};",
      "}",
      "",
      "interface TypeB {",
      "    type: 'B';",
      "    ${3:propB}: ${4:Type};",
      "}",
      "",
      "type MergedType = TypeA | TypeB;",
      "$0"
    ],
    "description": "Merge two union types with discriminant properties in TypeScript"
  },
  "merge:type:guards": {
    "prefix": "merge_type_guards",
    "body": [
      "// Merge using type guards",
      "interface Circle {",
      "    kind: 'circle';",
      "    radius: number;",
      "}",
      "",
      "interface Square {",
      "    kind: 'square';",
      "    sideLength: number;",
      "}",
      "",
      "function mergeShapes(shape1: Circle | Square, shape2: Circle | Square): Circle | Square {",
      "    if (shape1.kind === 'circle' && shape2.kind === 'circle') {",
      "        return { kind: 'circle', radius: shape1.radius + shape2.radius };",
      "    } else if (shape1.kind === 'square' && shape2.kind === 'square') {",
      "        return { kind: 'square', sideLength: shape1.sideLength + shape2.sideLength };",
      "    } else {",
      "        throw new Error('Cannot merge different kinds of shapes');",
      "    }",
      "}",
      "$0"
    ],
    "description": "Merge using type guards in TypeScript"
  },
  "merge:type:enum_union": {
    "prefix": "merge_type_enum_union",
    "body": [
      "// Merge two enums with union types",
      "enum MyEnum1 {",
      "\tOption1 = '${1:value1}',",
      "\tOption2 = '${2:value2}',",
      "}",
      "",
      "enum MyEnum2 {",
      "\tOption3 = '${3:value3}',",
      "\tOption4 = '${4:value4}',",
      "}",
      "",
      "// Merge enums",
      "type MergedEnum = MyEnum1 | MyEnum2;",
      "$0"
    ],
    "description": "Merge two enums with union types in TypeScript"
  }
}
