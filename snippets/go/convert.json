{
  "convert:int to string": {
    "prefix": "convert_int_to_string",
    "body": ["strconv.Itoa(${1:int})"],
    "description": "Converts an integer to its string representation"
  },
  "convert:string to int": {
    "prefix": "convert_string_to_int",
    "body": ["strconv.Atoi(${1:\"123\"})"],
    "description": "Converts a string to an integer"
  },
  "convert:float64 to string": {
    "prefix": "convert_float64_to_string",
    "body": ["strconv.FormatFloat(${1:float64}, 'f', -1, 64)"],
    "description": "Converts a float64 to its string representation"
  },
  "convert:string to float64": {
    "prefix": "convert_string_to_float64",
    "body": ["strconv.ParseFloat(${1:\"3.14\"}, 64)"],
    "description": "Converts a string to a float64"
  },
  "convert:time.Time to string": {
    "prefix": "convert_time_to_time",
    "body": ["${1:timeVar}.Format(\"${2:2006-01-02 15:04:05}\")"],
    "description": "Converts a time.Time variable to a string using a format"
  },
  "convert:string to time.Time": {
    "prefix": "convert_string_to_time",
    "body": [
      "time.Parse(\"${1:2006-01-02 15:04:05}\", ${2:\"2023-06-24 13:45:00\"})"
    ],
    "description": "Converts a string to a time.Time variable using a format"
  },
  "convert:JSON to struct": {
    "prefix": "convert_json_to_struct",
    "body": ["json.Unmarshal([]byte(${1:jsonString}), &${2:structVar})"],
    "description": "Converts JSON data into a struct"
  },
  "convert:struct to JSON": {
    "prefix": "convert_struct_to_json",
    "body": ["json.Marshal(${1:structVar})"],
    "description": "Converts a struct to JSON data"
  },
  "convert:byte slice to string": {
    "prefix": "convert_bytes_to_string",
    "body": ["string(${1:byteSlice})"],
    "description": "Converts a byte slice to a string"
  },
  "convert:string to byte slice": {
    "prefix": "convert_string_to_bytes",
    "body": ["[]byte(${1:\"hello\"})"],
    "description": "Converts a string to a byte slice"
  },
  "convert:array to slice": {
    "prefix": "convert_array_to_slice",
    "body": ["${1:array}[:]"],
    "description": "Converts an array to a slice"
  },
  "convert:slice to array": {
    "prefix": "convert_slice_to_array",
    "body": ["copy(${1:array}[:], ${2:slice})"],
    "description": "Converts a slice to an array (copies elements)"
  },
  "convert:rune to string": {
    "prefix": "convert_rune_to_string",
    "body": ["string(${1:rune})"],
    "description": "Converts a rune to a string"
  },
  "convert:string to rune slice": {
    "prefix": "convert_string_to_runes",
    "body": ["[]rune(${1:\"hello\"})"],
    "description": "Converts a string to a slice of runes"
  },
  "convert:bool to string": {
    "prefix": "convert_bool_to_string",
    "body": ["strconv.FormatBool(${1:bool})"],
    "description": "Converts a bool to its string representation"
  },
  "convert:string to bool": {
    "prefix": "convert_string_to_bool",
    "body": ["strconv.ParseBool(${1:\"true\"})"],
    "description": "Converts a string to a bool"
  },
  "convert:hexadecimal string to integer": {
    "prefix": "convert_hex_to_int",
    "body": ["strconv.ParseInt(${1:\"0x1a\", 0, 64})"],
    "description": "Converts a hexadecimal string to an integer"
  },
  "convert:integer to hexadecimal string": {
    "prefix": "convert_int_to_hex",
    "body": ["strconv.FormatInt(${1:int64}, 16)"],
    "description": "Converts an integer to a hexadecimal string"
  },
  "convert:error to string": {
    "prefix": "convert_error_to_string",
    "body": ["${1:errorVar}.Error()"],
    "description": "Converts an error to its string representation"
  },
  "convert:string to error": {
    "prefix": "convert_string_to_error",
    "body": ["errors.New(${1:\"error message\"})"],
    "description": "Converts a string to an error"
  },
  "convert:rune to Unicode code point": {
    "prefix": "convert_rune_to_codepoint",
    "body": ["int(${1:rune})"],
    "description": "Converts a rune to its Unicode code point"
  },
  "convert:Unicode code point to rune": {
    "prefix": "convertunicodetorune",
    "body": ["rune(${1:codePoint})"],
    "description": "Converts a Unicode code point to a rune"
  },
  "convert:byte to rune": {
    "prefix": "convert_byte_to_rune",
    "body": ["rune(${1:byte})"],
    "description": "Converts a byte to a rune"
  },
  "convert:rune to byte": {
    "prefix": "convert_rune_to_byte",
    "body": ["byte(${1:rune})"],
    "description": "Converts a rune to a byte"
  },
  "convert:float32 to float64": {
    "prefix": "convert_float32_to_float64",
    "body": ["float64(${1:float32})"],
    "description": "Converts a float32 to a float64"
  },
  "convert:float64 to float32": {
    "prefix": "convert_float64_to_float32",
    "body": ["float32(${1:float64})"],
    "description": "Converts a float64 to a float32"
  },
  "convert:uint to int": {
    "prefix": "convert_uint_to_int",
    "body": ["int(${1:uint})"],
    "description": "Converts a uint to an int"
  },
  "convert:int to uint": {
    "prefix": "convert_int_to_uint",
    "body": ["uint(${1:int})"],
    "description": "Converts an int to a uint"
  },
  "convert:uintptr to pointer": {
    "prefix": "convert_uintptr_to_pointer",
    "body": ["unsafe.Pointer(${1:uintptr})"],
    "description": "Converts a uintptr to a pointer"
  },
  "convert:pointer to uintptr": {
    "prefix": "convert_pointer_to_uintptr",
    "body": ["uintptr(${1:pointer})"],
    "description": "Converts a pointer to a uintptr"
  },
  "convert:int to byte": {
    "prefix": "convert_int_to_byte",
    "body": ["byte(${1:int})"],
    "description": "Converts an int to a byte"
  },
  "convert:byte to int": {
    "prefix": "convert_byte_to_int",
    "body": ["int(${1:byte})"],
    "description": "Converts a byte to an int"
  },
  "convert:string to lowercase": {
    "prefix": "convert_string_to_lowercase",
    "body": ["strings.ToLower(${1:\"String\"})"],
    "description": "Converts a string to lowercase"
  },
  "convert:string to uppercase": {
    "prefix": "convert_string_to_uppercase",
    "body": ["strings.ToUpper(${1:\"string\"})"],
    "description": "Converts a string to uppercase"
  },
  "convert:slice of strings to comma-separated string": {
    "prefix": "convert_slicestring_to_comma_separated_string",
    "body": ["strings.Join(${1:slice}, \", \")"],
    "description": "Converts a slice of strings to a comma-separated string"
  },
  "convert:comma-separated string to slice of strings": {
    "prefix": "convert_comma_separated_string_to_slice_of_strings",
    "body": ["strings.Split(${1:\"a, b, c\"}, \", \")"],
    "description": "Converts a comma-separated string to a slice of strings"
  },
  "convert:slice of integers to slice of strings": {
    "prefix": "convert_sliceint_to_slicestring",
    "body": ["strconv.Itoa(${1:intVar})"],
    "description": "Converts a slice of integers to a slice of strings"
  },
  "convert:slice of strings to slice of integers": {
    "prefix": "convert_slicestring_to_sliceint",
    "body": ["strconv.Atoi(${1:\"123\"})"],
    "description": "Converts a slice of strings to a slice of integers"
  }
}
