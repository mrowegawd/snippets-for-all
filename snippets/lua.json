{
  "todo": {
    "prefix": "todo_",
    "body": ["-- TODO: $0"],
    "description": "TODO"
  },
  "warn": {
    "prefix": "warn_",
    "body": ["-- WARN: $0"],
    "description": "TODO"
  },
  "error": {
    "prefix": "error_",
    "body": ["-- ERROR: $0"],
    "description": "TODO"
  },
  "require": {
    "prefix": "req_",
    "body": ["require(\"${1:module}\")"],
    "description": "Require module"
  },
  "var": {
    "prefix": "var_local",
    "body": ["local ${1:varName} = ${0:value}"],
    "description": "create a variable"
  },
  "var require": {
    "prefix": "var_require",
    "body": ["local ${1:var} = require(\"${2:module}\")"],
    "description": "Require module as a variable"
  },
  "class": {
    "prefix": "class_",
    "body": [
      "${1:className} = {}\n",
      "$1.${2:new} = function($3)",
      "\tlocal ${4:varName} = ${5:{}}\n",
      "\t${6: --code}\n",
      "\treturn $4",
      "end"
    ],
    "description": "Create a class"
  },
  "if": {
    "prefix": "if_",
    "body": ["if ${1:true} then", "\t$0", "end"]
  },
  "else if": {
    "prefix": "elif_",
    "body": ["elseif ${1:true} then", "\t$0"]
  },
  "for": {
    "prefix": "for_",
    "body": ["for ${1:i}=${2:1},${3:10} do", "\t$0", "end"],
    "description": "for loop range"
  },
  "for each": {
    "prefix": "for_each",
    "body": ["for ${1:i}, ${2:x} in pairs(${3:table}) do", "\t$0", "end"]
  },
  "for line": {
    "prefix": "for_line",
    "body": [
      "f = io.open(${1:\"${2:filename}\"}, \"${3:r}\")\n",
      "while true do",
      "\tline = f:read()",
      "\tif line == nil then break end\n",
      "\t${0:-- code}",
      "end"
    ],
    "description": "read file line by line"
  },
  "function": {
    "prefix": "func_",
    "body": ["function ${1:name}($2)", "\t${3:-- code}", "end"]
  },
  "function annoymous": {
    "prefix": "func_ann",
    "body": ["function($1)", "\t${2}", "end"]
  },
  "function literal": {
    "prefix": "func_literal",
    "body": ["local ${1:name} = function($2)", "\t${0:-- code}", "end"]
  },
  "return": {
    "prefix": "rt_",
    "body": ["return $0"],
    "description": "return value"
  },
  "self": {
    "prefix": "class_self",
    "body": ["function self:${1:methodName}($2)", "\t$0", "end"]
  },
  "while": {
    "prefix": "while_",
    "body": ["while ${1:true} do", "\t$0", "end"]
  },
  "pcall": {
    "prefix": "pcall_",
    "body": ["pcall(${1:function})"],
    "description": "Protect call a function"
  },
  "locpcall": {
    "prefix": "var_local_pcall",
    "body": ["local ${1:status}, ${2:err_or_value} = pcall(${3:function})"],
    "description": "Protect call a function as a variable"
  }
}
